{"version":3,"file":"main.69e4e79d94589097aceb.js","mappings":"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","sources":["webpack://battleship/./src/model/Ship.ts","webpack://battleship/./src/model/Board.ts","webpack://battleship/./src/controller/AI.ts","webpack://battleship/./src/view/Cells.ts","webpack://battleship/./src/view/Ships.ts","webpack://battleship/./src/view/PlayerSide.ts","webpack://battleship/./src/view/ComputerSide.ts","webpack://battleship/./src/controller/Game.ts","webpack://battleship/./src/view/GameOver.ts","webpack://battleship/./src/index.ts"],"sourcesContent":["export class Ship {\n    static #MIN_LENGTH = 1\n    static #MAX_LENGTH = 5\n\n    static get minLength() {\n        return Ship.#MIN_LENGTH\n    }\n\n    static get maxLength() {\n        return Ship.#MAX_LENGTH\n    }\n\n    #length: number\n    #numberOfHits: number\n\n    constructor(length: number) {\n        if (length < Ship.#MIN_LENGTH || length > Ship.#MAX_LENGTH) {\n            throw new Error('Ship length out of bounds: ' + length)\n        }\n        this.#length = length\n        this.#numberOfHits = 0\n    }\n\n    get length() {\n        return this.#length\n    }\n\n    get isSunk() {\n        return this.#length <= this.#numberOfHits\n    }\n\n    hit() {\n        if (!this.isSunk) {\n            this.#numberOfHits++\n        }\n    }\n}","import { Ship } from \"./Ship\"\n\nexport type State = \"fog\" | \"water\" | \"hit\" | \"sunk\"\ninterface Cell { shipId: number, isFog: boolean, isClear: boolean }\n\nexport type Orientation = 'horizontal' | 'vertical'\n\nexport class Board {\n    static #SIZE = 10\n\n    static get Size() {\n        return Board.#SIZE\n    }\n\n    #ships: Ship[]\n    #cells: Cell[][]\n\n    constructor() {\n        this.#ships = []\n        this.#cells = []\n\n        for (let i = 0; i < Board.#SIZE; i++) {\n            const row = []\n            for (let j = 0; j < Board.#SIZE; j++) {\n                row.push({ shipId: -1, isFog: true, isClear: false })\n            }\n            this.#cells.push(row)\n        }\n    }\n\n    get ships() {\n        return this.#ships\n    }\n\n    get allAreSunk() {\n        return this.#ships.every(ship => ship.isSunk)\n    }\n\n    randomize(lengths: number[]) {\n        for (const length of lengths) {\n            const ship = new Ship(length)\n            let x: number\n            let y: number\n            let orientation: Orientation\n\n            do {\n                x = Math.round(Math.random() * 9)\n                y = Math.round(Math.random() * 9)\n                orientation = Math.random() > .5 ? 'horizontal' : 'vertical'\n            } while(!this.#isValidPlacement(ship, x, y, orientation))\n\n            this.place(ship, x, y, orientation)\n        }\n    }\n\n    isShip(x: number, y: number) {\n        return this.#cells[x][y].shipId >= 0\n    }\n\n    getState(x: number, y: number) {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (cell.isFog) {\n            return \"fog\"\n        } else if (cell.shipId === -1) {\n            return \"water\"\n        } else if (this.#ships[cell.shipId].isSunk) {\n            return \"sunk\"\n        } else {\n            return \"hit\"\n        }\n    }\n\n    place(ship: Ship, x: number, y: number, orientation: Orientation) {\n        this.#validateCoordinate(x, y)\n\n        if (!this.#isValidPlacement(ship, x, y, orientation)) {\n            throw new Error(`Invalid ship placement: ${x}, ${y}`)\n        }\n\n        this.#ships.push(ship)\n        const id = this.#ships.length - 1\n\n        for (let i = 0; i < ship.length; i++) {\n            if (orientation === 'horizontal') {\n                this.#cells[x + i][y].shipId = id\n            } else {\n                this.#cells[x][y + i].shipId = id\n            }\n        }\n    }\n\n    attack(x: number, y: number) {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (!cell.isFog) {\n            throw new Error(`Cell already received an attack: ${x}, ${y}`)\n        }\n\n        cell.isFog = false\n\n        if (cell.shipId < 0) {\n            return\n        }\n\n        const ship = this.#ships[cell.shipId]\n\n        ship.hit()\n\n        if (ship.isSunk) {\n            this.#clear(x, y)\n        }\n    }\n\n    #clear(x: number, y: number) {\n        const cell = this.#cells[x][y]\n\n        if (cell.isClear) {\n            return\n        }\n\n        cell.isFog = false\n        cell.isClear = true\n\n        if (cell.shipId >= 0) {\n            for (const neighbor of this.#getNeighbors(x, y)) {\n                this.#clear(neighbor.x, neighbor.y)\n            }\n        }\n    }\n\n    #getNeighbors(x: number, y: number) {\n        const result: { x: number, y: number }[] = []\n\n        if (x > 0) {\n            result.push({ x: x - 1, y: y })\n        }\n\n        if (x < Board.#SIZE - 1) {\n            result.push({ x: x + 1, y: y })\n        }\n\n        if (y > 0) {\n            result.push({ x: x, y: y - 1 })\n        }\n\n        if (y < Board.#SIZE - 1) {\n            result.push({ x: x, y: y + 1 })\n        }\n\n        if (x > 0 && y > 0) {\n            result.push({ x: x - 1, y: y - 1 })\n        }\n\n        if (x > 0 && y < Board.#SIZE - 1) {\n            result.push({ x: x - 1, y: y + 1 })\n        }\n\n        if (x < Board.#SIZE - 1 && y < Board.#SIZE - 1) {\n            result.push({ x: x + 1, y: y + 1 })\n        }\n\n        if (x < Board.#SIZE - 1 && y > 0) {\n            result.push({ x: x + 1, y: y - 1 })\n        }\n\n        return result\n    }\n\n    #isValidPlacement(\n        ship: Ship,\n        x: number,\n        y: number,\n        orientation: Orientation\n    ) {\n        const isHorizontal = orientation === 'horizontal'\n        if ((isHorizontal && x + ship.length > Board.#SIZE) ||\n            (!isHorizontal && y + ship.length > Board.#SIZE)\n        ) {\n            return false\n        }\n\n        for (let i = -1; i <= ship.length; i++) {\n            for (let j = -1; j <= +1; j++) {\n                let cell: Cell\n\n                try {\n                    if (isHorizontal) {\n                        cell = this.#cells[x + i][y + j]\n                    } else {\n                        cell = this.#cells[x + j][y + i]\n                    }\n                } catch {\n                    continue\n                }\n\n                if (cell?.shipId >= 0) {\n                    return false\n                }\n            }\n        }\n\n        return true\n    }\n\n    #validateCoordinate(x: number, y: number) {\n        if (x < 0 || y < 0 || x >= Board.#SIZE || y >= Board.#SIZE) {\n            throw new Error(`Invalid coordinate: ${x}, ${y}`)\n        }\n    }\n}","import { Board } from \"../model/Board\"\nimport { Ship } from \"../model/Ship\"\n\ntype Candidate = { x: number, y: number, evaluation: number }\n\n/**\n * Finds the best coordinates to attack for the current state of the board.\n *\n * This is done by evaluating the importance of all the remaining coordinates\n * and returning the ones with the highest evaluation.\n */\nexport function findBestTargets(board: Board): { x: number, y: number }[] {\n    const candidates: Candidate[] = []\n    let bestEvaluation = -Infinity\n\n    for (let x = 0; x < Board.Size; x++) {\n        for (let y = 0; y < Board.Size; y++) {\n            if (board.getState(x, y) === 'fog') {\n                const evaluation = evaluate(board, x, y)\n                bestEvaluation = Math.max(bestEvaluation, evaluation)\n                candidates.push({ x, y, evaluation })\n            }\n        }\n    }\n\n    return candidates\n        .filter(c => c.evaluation === bestEvaluation)\n        .map(({ x, y }) => ({ x, y }))\n}\n\nfunction evaluate(board: Board, x: number, y: number) {\n    if (mustBeWater(board, x, y)) {\n        return -Infinity\n    }\n\n    if (directNeighborIsHit(board, x, y)) {\n        return Infinity\n    }\n\n    return calculateTotalCapacity(board, x, y)\n}\n\nfunction mustBeWater(board: Board, x: number, y: number) {\n    const smallestLength = Math.min(...getShipLengthsInPlay(board))\n\n    return diagonalNeighborIsHit(board, x, y)\n        || calculateCapacity(board, x, y, smallestLength) === 0\n}\n\nfunction directNeighborIsHit(board: Board, x: number, y: number) {\n    return x > 0 && isHit(board, x - 1, y)\n        || y > 0 && isHit(board, x, y - 1)\n        || x < Board.Size - 1 && isHit(board, x + 1, y)\n        || y < Board.Size - 1 && isHit(board, x, y + 1)\n}\n\nfunction diagonalNeighborIsHit(board: Board, x: number, y: number) {\n    return x > 0 && y > 0 && isHit(board, x - 1, y - 1)\n        || x > 0 && y < Board.Size - 1 && isHit(board, x - 1, y + 1)\n        || y > 0 && x < Board.Size - 1 && isHit(board, x + 1, y - 1)\n        || x < Board.Size - 1 && y < Board.Size - 1 && isHit(board, x + 1, y + 1)\n}\n\n/**\n * Calculates how many ways there are to fit any of the remaining ships\n * through the given coordinate, weighted by the length of the respective ship.\n */\nfunction calculateTotalCapacity(board: Board, x: number, y: number) {\n    let capacity = 0\n\n    for (const length of getShipLengthsInPlay(board)) {\n        capacity += calculateCapacity(board, x, y, length)  * length\n    }\n\n    return capacity\n}\n\n/**\n * Calculates how many ways there are to fit a ship\n * with the given length through the given coordinate.\n */\nfunction calculateCapacity(\n    board: Board,\n    x: number,\n    y: number,\n    length: number\n) {\n    if (length < Ship.minLength || length > Ship.maxLength) {\n        throw new Error('Length out of bounds: ' + length)\n    }\n\n    const leftEnd = Math.max(0, x - length + 1)\n    const topEnd = Math.max(0, y - length + 1)\n    const rightEnd = Math.min(9, x + length - 1)\n    const bottomEnd = Math.min(9, y + length - 1)\n\n    let longest = 0\n    let current = 0\n\n    for (let i = leftEnd; i <= rightEnd; i++) {\n        const state = board.getState(i, y)\n        if (state === 'fog' || state === 'hit') {\n            longest = ++current > longest ? current : longest\n        } else {\n            current = 0\n        }\n    }\n\n    const horizontalCapacity = Math.max(0, longest - length + 1)\n\n    longest = 0\n    current = 0\n\n    for (let j = topEnd; j <= bottomEnd; j++) {\n        const state = board.getState(x, j)\n        if (state === 'fog' || state === 'hit') {\n            longest = ++current > longest ? current : longest\n        } else {\n            current = 0\n        }\n    }\n\n    const verticalCapacity = Math.max(0, longest - length + 1)\n\n    return Math.max(0, horizontalCapacity + verticalCapacity)\n}\n\nfunction getShipLengthsInPlay(board: Board) {\n    return board.ships.filter(s => !s.isSunk).map(s => s.length)\n}\n\nfunction isHit(board: Board, x: number, y: number) {\n    return board.getState(x, y) === \"hit\"\n}","import { Board } from \"../model/Board\"\n\nexport function updateCell(board: Board, cells: Element[], x: number, y: number) {\n    const cell = getCell(cells, x, y)\n    const state = board.getState(x, y)\n\n    if (state === 'hit' || state === 'sunk') {\n        cell.classList.add('cell--hit')\n    }\n\n    if (state === 'sunk') {\n        clearCell(board, cells, cell)\n    }\n    \n    if (state === 'water') {\n        cell.classList.add('cell--water')\n    }\n\n    cell.classList.add('cell--cleared')\n    cell.classList.remove('cell--clickable')\n}\n\nfunction getCell(cells: Element[], x: number, y: number) {\n    return cells.find(cell =>\n        cell.getAttribute('data-x') === ''+x &&\n        cell.getAttribute('data-y') === ''+y) as HTMLDivElement\n}\n\n/**\n * Recursively updates sunken ships and uncovers the surrounding water.\n */\nfunction clearCell(board: Board, cells: Element[], target: Element) {\n    if (target.classList.contains('cell--sunk')) {\n        return\n    }\n\n    target.classList.add('cell--cleared')\n    target.classList.remove('cell--clickable')\n\n    if (target.classList.contains('cell--hit')) {\n        target.classList.add('cell--sunk')\n        const neighbors = cells.filter(cell => areNeighbors(target, cell))\n        neighbors.forEach(neighbor => clearCell(board, cells, neighbor))\n    } else if (!target.classList.contains('water')) {\n        target.classList.add('cell--water')\n    }\n}\n\nfunction areNeighbors(thisCell: Element, thatCell: Element) {\n    const thisX = thisCell.getAttribute('data-x') as string\n    const thisY = thisCell.getAttribute('data-y') as string\n    const thatX = thatCell.getAttribute('data-x') as string\n    const thatY = thatCell.getAttribute('data-y') as string\n\n    return Math.abs(+thisX - +thatX) <= 1\n        && Math.abs(+thisY - +thatY) <= 1\n}","import { Ship } from \"../model/Ship\";\n\nexport function initializeShips(ships: Ship[], divShips: HTMLDivElement) {\n    divShips.innerHTML = ''\n\n    for (let id = 0; id < ships.length; id++) {\n        const divShip = document.createElement('div')\n        divShip.classList.add('ship')\n        divShip.setAttribute('data-id', \"\"+id)\n        divShips.appendChild(divShip)\n\n        for (let i = 0; i < ships[id].length; i++) {\n            const square = document.createElement('div')\n            square.classList.add('square')\n            divShip.appendChild(square)\n        }\n    }\n}\n\nexport function updateShips(ships: Ship[], divShips: HTMLDivElement) {\n    for (let id = 0; id < ships.length; id++) {\n        if (ships[id].isSunk) {\n            const divShip = divShips.querySelector(`.ship[data-id=\"${id}\"`) as HTMLDivElement\n            divShip.classList.add('ship--sunk')\n        }\n    }\n}","import { updateCell } from \"./Cells\"\nimport { Board } from \"../model/Board\"\nimport { initializeShips, updateShips } from \"./Ships\"\n\nconst divBoard = document.querySelector('#player-board') as HTMLDivElement\nconst divShips = document.querySelector('#player-ships') as HTMLDivElement\n\nlet cells: Element[]\n\nexport function initializePlayerSide(board: Board) {\n    divBoard.innerHTML = ''\n\n    for (let y = 0; y < Board.Size; y++) {\n        for (let x = 0; x < Board.Size; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            if (board.isShip(x, y)) {\n                cell.classList.add('cell--ship')\n                cell.classList.add('cell--player')\n            }\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function updatePlayerSide(board: Board, x: number, y: number) {\n    updateCell(board, cells, x, y)\n    updateShips(board.ships, divShips)\n}","import { attackComputer } from \"../controller/Game\"\nimport { updateCell } from \"./Cells\"\nimport { Board } from \"../model/Board\"\nimport { initializeShips, updateShips } from \"./Ships\"\n\nconst divBoard = document.querySelector('#computer-board') as HTMLDivElement\nconst divShips = document.querySelector('#computer-ships') as HTMLDivElement\n\nlet cells: Element[]\n\nexport function initializeComputerSide(board: Board) {\n    divBoard.innerHTML = ''\n\n    for (let y = 0; y < Board.Size; y++) {\n        for (let x = 0; x < Board.Size; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            cell.classList.add('cell--clickable')\n            cell.addEventListener('click', attack)\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function updateComputerSide(board: Board, x: number, y: number) {\n    updateCell(board, cells, x, y)\n    updateShips(board.ships, divShips)\n}\n\nexport function deactivateComputerSide() {\n    cells.forEach(cell => cell.classList.remove('cell--clickable'))\n}\n\nfunction attack(event: Event) {\n    const cell = event.target as Element\n\n    if (!cell.classList.contains('cell--clickable')) {\n        return\n    }\n\n    const x = cell.getAttribute('data-x') as string\n    const y = cell.getAttribute('data-y') as string\n\n    attackComputer(+x, +y)\n}","import { Board } from '../model/Board'\nimport { findBestTargets } from './AI'\nimport { initializePlayerSide, updatePlayerSide } from '../view/PlayerSide'\nimport { initializeComputerSide, deactivateComputerSide, updateComputerSide } from '../view/ComputerSide'\nimport { showGameOver } from '../view/GameOver'\n\nconst shipLengths = [ 5, 4, 3, 3, 2, 2 ]\n\nlet playerBoard: Board\nlet computerBoard: Board\n\nexport function initialize() {\n    playerBoard = new Board()\n    computerBoard = new Board()\n    playerBoard.randomize(shipLengths)\n    computerBoard.randomize(shipLengths)\n    initializePlayerSide(playerBoard)\n    initializeComputerSide(computerBoard)\n}\n\nexport function attackComputer(x: number, y: number) {\n    computerBoard.attack(x, y)\n    updateComputerSide(computerBoard, x, y)\n\n    if (computerBoard.allAreSunk) {\n        handleGameOver()\n    } else {\n        attackPlayer()\n    }\n}\n\nfunction attackPlayer() {\n    const bestTargets = findBestTargets(playerBoard)\n    const { x, y } = pickAtRandom(bestTargets)\n    playerBoard.attack(x, y)\n    updatePlayerSide(playerBoard, x, y)\n\n    if (playerBoard.allAreSunk) {\n        handleGameOver()\n    }\n}\n\nfunction pickAtRandom(coordinates: { x: number, y: number }[]) {\n    const maxIndex = coordinates.length - 1\n    const randomIndex = Math.round(Math.random() * maxIndex)\n    const result = coordinates[randomIndex]\n\n    return { x: result.x, y: result.y }\n}\n\nfunction handleGameOver() {\n    if (playerBoard.allAreSunk && computerBoard.allAreSunk) {\n        throw Error('Indecisive game result')\n    }\n\n    deactivateComputerSide()\n    showGameOver(computerBoard.allAreSunk)\n}\n","import { initialize } from \"../controller/Game\"\n\nconst gameOverDialog = document.getElementById('game-over-dialog') as HTMLDialogElement\nconst closeButton = document.getElementById('close-button') as HTMLButtonElement\nconst resultSpan = document.getElementById('result') as HTMLSpanElement\nconst newGameButton = document.getElementById('new-game-button') as HTMLButtonElement\n\ncloseButton.addEventListener('click', () => gameOverDialog?.close())\nnewGameButton.addEventListener('click', startNewGame)\n\nexport function showGameOver(playerWon: boolean) {\n    gameOverDialog?.showModal()\n    resultSpan.textContent = playerWon ? 'You won!' : 'You lost!'\n}\n\nfunction startNewGame() {\n    gameOverDialog?.close()\n    initialize()\n}","import './styles.scss'\nimport { initialize } from './controller/Game'\n\ninitialize()"],"names":["Ship","minLength","maxLength","constructor","length","Error","this","isSunk","hit","Board","Size","i","row","j","push","shipId","isFog","isClear","ships","allAreSunk","every","ship","randomize","lengths","x","y","orientation","Math","round","random","place","isShip","getState","cell","id","attack","evaluate","board","smallestLength","min","getShipLengthsInPlay","isHit","diagonalNeighborIsHit","calculateCapacity","mustBeWater","directNeighborIsHit","Infinity","capacity","calculateTotalCapacity","leftEnd","max","topEnd","rightEnd","bottomEnd","longest","current","state","horizontalCapacity","verticalCapacity","filter","s","map","updateCell","cells","find","getAttribute","getCell","classList","add","clearCell","remove","target","contains","thisCell","thatCell","thisX","thisY","thatX","thatY","abs","areNeighbors","forEach","neighbor","initializeShips","divShips","innerHTML","divShip","document","createElement","setAttribute","appendChild","square","updateShips","querySelector","result","isHorizontal","divBoard","event","computerBoard","updateComputerSide","handleGameOver","bestTargets","candidates","bestEvaluation","evaluation","c","findBestTargets","playerBoard","coordinates","maxIndex","pickAtRandom","updatePlayerSide","attackPlayer","gameOverDialog","getElementById","closeButton","resultSpan","newGameButton","addEventListener","close","initialize","shipLengths","Array","from","querySelectorAll","initializePlayerSide","initializeComputerSide","playerWon","showModal","textContent"],"sourceRoot":""}
{"version":3,"file":"main.973cd3b7ff6783831ccf.js","mappings":"qrBAAO,MAAMA,EAIEC,uBACP,OAAO,EAAAD,EAAI,QACf,CAEWE,uBACP,OAAO,EAAAF,EAAI,QACf,CAKAG,YAAYC,GACR,GAJJ,mBACA,mBAGQA,EAAS,EAAAJ,EAAI,UAAgBI,EAAS,EAAAJ,EAAI,SAC1C,MAAM,IAAIK,MAAM,8BAAgCD,GAEpD,EAAAE,KAAI,EAAWF,EAAM,KACrB,EAAAE,KAAI,EAAiB,EAAC,IAC1B,CAEIF,aACA,OAAO,EAAAE,KAAI,MACf,CAEIC,aACA,OAAO,EAAAD,KAAI,QAAY,EAAAA,KAAI,MAC/B,CAEAE,M,MACSF,KAAKC,QACN,EAAAD,KAAA,OAAAA,KAAA,YAAoB,IAE5B,E,gCAlCO,SAAc,GACd,SAAc,G,0qBCKlB,MAAMG,EAGEC,kBACP,OAAO,EAAAD,EAAK,QAChB,CAKAN,c,YAHA,mBACA,mBAGI,EAAAG,KAAI,EAAU,GAAE,KAChB,EAAAA,KAAI,EAAU,GAAE,KAEhB,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAAF,EAAK,SAAQE,IAAK,CAClC,MAAMC,EAAM,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAAJ,EAAK,SAAQI,IAC7BD,EAAIE,KAAK,CAAEC,QAAS,EAAGC,OAAO,EAAMC,SAAS,IAEjD,EAAAX,KAAI,OAAQQ,KAAKF,E,CAEzB,CAEIM,YACA,OAAO,EAAAZ,KAAI,MACf,CAEIa,iBACA,OAAO,EAAAb,KAAI,OAAQc,OAAMC,GAAQA,EAAKd,QAC1C,CAEAe,UAAUC,GACN,IAAK,MAAMnB,KAAUmB,EAAS,CAC1B,MAAMF,EAAO,IAAIrB,EAAKI,GACtB,IAAIoB,EACAC,EACAC,EAEJ,GACIF,EAAIG,KAAKC,MAAsB,EAAhBD,KAAKE,UACpBJ,EAAIE,KAAKC,MAAsB,EAAhBD,KAAKE,UACpBH,EAAcC,KAAKE,SAAW,GAAK,aAAe,kBAC7C,EAAAvB,KAAI,SAAkB,KAAtBA,KAAuBe,EAAMG,EAAGC,EAAGC,IAE5CpB,KAAKwB,MAAMT,EAAMG,EAAGC,EAAGC,E,CAE/B,CAEAK,OAAOP,EAAWC,GACd,OAAO,EAAAnB,KAAI,OAAQkB,GAAGC,GAAGV,QAAU,CACvC,CAEAiB,SAASR,EAAWC,GAChB,EAAAnB,KAAI,SAAoB,KAAxBA,KAAyBkB,EAAGC,GAE5B,MAAMQ,EAAO,EAAA3B,KAAI,OAAQkB,GAAGC,GAE5B,OAAIQ,EAAKjB,MACE,OACiB,IAAjBiB,EAAKlB,OACL,QACA,EAAAT,KAAI,OAAQ2B,EAAKlB,QAAQR,OACzB,OAEA,KAEf,CAEAuB,MAAMT,EAAYG,EAAWC,EAAWC,GAGpC,GAFA,EAAApB,KAAI,SAAoB,KAAxBA,KAAyBkB,EAAGC,IAEvB,EAAAnB,KAAI,SAAkB,KAAtBA,KAAuBe,EAAMG,EAAGC,EAAGC,GACpC,MAAM,IAAIrB,MAAM,2BAA2BmB,MAAMC,KAGrD,EAAAnB,KAAI,OAAQQ,KAAKO,GACjB,MAAMa,EAAK,EAAA5B,KAAI,OAAQF,OAAS,EAEhC,IAAK,IAAIO,EAAI,EAAGA,EAAIU,EAAKjB,OAAQO,IACT,eAAhBe,EACA,EAAApB,KAAI,OAAQkB,EAAIb,GAAGc,GAAGV,OAASmB,EAE/B,EAAA5B,KAAI,OAAQkB,GAAGC,EAAId,GAAGI,OAASmB,CAG3C,CAEAC,OAAOX,EAAWC,GACd,EAAAnB,KAAI,SAAoB,KAAxBA,KAAyBkB,EAAGC,GAE5B,MAAMQ,EAAO,EAAA3B,KAAI,OAAQkB,GAAGC,GAE5B,IAAKQ,EAAKjB,MACN,MAAM,IAAIX,MAAM,oCAAoCmB,MAAMC,KAK9D,GAFAQ,EAAKjB,OAAQ,EAETiB,EAAKlB,OAAS,EACd,OAGJ,MAAMM,EAAO,EAAAf,KAAI,OAAQ2B,EAAKlB,QAE9BM,EAAKb,MAEDa,EAAKd,QACL,EAAAD,KAAI,SAAO,KAAXA,KAAYkB,EAAGC,EAEvB,EClHG,SAASW,EAAgBlB,EAAemB,GAC3CA,EAASC,UAAY,GAErB,IAAK,IAAIJ,EAAK,EAAGA,EAAKhB,EAAMd,OAAQ8B,IAAM,CACtC,MAAMK,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAUC,IAAI,QACtBJ,EAAQK,aAAa,UAAW,GAAGV,GACnCG,EAASQ,YAAYN,GAErB,IAAK,IAAI5B,EAAI,EAAGA,EAAIO,EAAMgB,GAAI9B,OAAQO,IAAK,CACvC,MAAMmC,EAASN,SAASC,cAAc,OACtCK,EAAOJ,UAAUC,IAAI,UACrBJ,EAAQM,YAAYC,E,EAGhC,CAEO,SAASC,EAAY7B,EAAemB,GACvC,IAAK,IAAIH,EAAK,EAAGA,EAAKhB,EAAMd,OAAQ8B,IAC5BhB,EAAMgB,GAAI3B,QACM8B,EAASW,cAAc,kBAAkBd,MACjDQ,UAAUC,IAAI,aAGlC,CCxBO,SAASM,EAAQC,EAAcC,EAAkBC,GAChDA,EAAOV,UAAUW,SAAS,gBAI9BD,EAAOV,UAAUC,IAAI,iBAEjBS,EAAOV,UAAUW,SAAS,eAC1BD,EAAOV,UAAUC,IAAI,cACHQ,EAAMG,QAAOrB,GAOvC,SAAsBsB,EAAmBC,GACrC,MAAMC,EAAQF,EAASG,aAAa,UAC9BC,EAAQJ,EAASG,aAAa,UAC9BE,EAAQJ,EAASE,aAAa,UAC9BG,EAAQL,EAASE,aAAa,UAEpC,OAAO/B,KAAKmC,KAAKL,GAASG,IAAU,GAC7BjC,KAAKmC,KAAKH,GAASE,IAAU,CACxC,CAf+CE,CAAaX,EAAQnB,KAClD+B,SAAQC,GAAYhB,EAAQC,EAAOC,EAAOc,MAC5Cb,EAAOV,UAAUW,SAAS,UAClCD,EAAOV,UAAUC,IAAI,SAE7B,C,2DFsGWnB,EAAWC,GACd,MAAMQ,EAAO,EAAA3B,KAAI,OAAQkB,GAAGC,GAE5B,IAAIQ,EAAKhB,UAITgB,EAAKjB,OAAQ,EACbiB,EAAKhB,SAAU,EAEXgB,EAAKlB,QAAU,GACf,IAAK,MAAMkD,KAAY,EAAA3D,KAAI,SAAc,KAAlBA,KAAmBkB,EAAGC,GACzC,EAAAnB,KAAI,SAAO,KAAXA,KAAY2D,EAASzC,EAAGyC,EAASxC,EAG7C,EAAC,WAEaD,EAAWC,GACrB,MAAMyC,EAAqC,GAkC3C,OAhCI1C,EAAI,GACJ0C,EAAOpD,KAAK,CAAEU,EAAGA,EAAI,EAAGC,EAAGA,IAG3BD,EAAI,EAAAf,EAAK,SAAS,GAClByD,EAAOpD,KAAK,CAAEU,EAAGA,EAAI,EAAGC,EAAGA,IAG3BA,EAAI,GACJyC,EAAOpD,KAAK,CAAEU,EAAGA,EAAGC,EAAGA,EAAI,IAG3BA,EAAI,EAAAhB,EAAK,SAAS,GAClByD,EAAOpD,KAAK,CAAEU,EAAGA,EAAGC,EAAGA,EAAI,IAG3BD,EAAI,GAAKC,EAAI,GACbyC,EAAOpD,KAAK,CAAEU,EAAGA,EAAI,EAAGC,EAAGA,EAAI,IAG/BD,EAAI,GAAKC,EAAI,EAAAhB,EAAK,SAAS,GAC3ByD,EAAOpD,KAAK,CAAEU,EAAGA,EAAI,EAAGC,EAAGA,EAAI,IAG/BD,EAAI,EAAAf,EAAK,SAAS,GAAKgB,EAAI,EAAAhB,EAAK,SAAS,GACzCyD,EAAOpD,KAAK,CAAEU,EAAGA,EAAI,EAAGC,EAAGA,EAAI,IAG/BD,EAAI,EAAAf,EAAK,SAAS,GAAKgB,EAAI,GAC3ByC,EAAOpD,KAAK,CAAEU,EAAGA,EAAI,EAAGC,EAAGA,EAAI,IAG5ByC,CACX,EAAC,WAGG7C,EACAG,EACAC,EACAC,GAEA,MAAMyC,EAA+B,eAAhBzC,EACrB,GAAKyC,GAAgB3C,EAAIH,EAAKjB,OAAS,EAAAK,EAAK,WACtC0D,GAAgB1C,EAAIJ,EAAKjB,OAAS,EAAAK,EAAK,SAEzC,OAAO,EAGX,IAAK,IAAIE,GAAK,EAAGA,GAAKU,EAAKjB,OAAQO,IAC/B,IAAK,IAAIE,GAAK,EAAGA,GAAK,EAAIA,IAAK,CAC3B,IAAIoB,EAEJ,IAEQA,EADAkC,EACO,EAAA7D,KAAI,OAAQkB,EAAIb,GAAGc,EAAIZ,GAEvB,EAAAP,KAAI,OAAQkB,EAAIX,GAAGY,EAAId,E,CAEpC,SACE,Q,CAGJ,IAAIsB,aAAI,EAAJA,EAAMlB,SAAU,EAChB,OAAO,C,CAKnB,OAAO,CACX,EAAC,WAEmBS,EAAWC,GAC3B,GAAID,EAAI,GAAKC,EAAI,GAAKD,GAAK,EAAAf,EAAK,UAAUgB,GAAK,EAAAhB,EAAK,SAChD,MAAM,IAAIJ,MAAM,uBAAuBmB,MAAMC,IAErD,EA7MO,SAAQ,IGJnB,MAAM2C,EAAU5B,SAASQ,cAAc,gBACjCqB,EAAW7B,SAASQ,cAAc,iBAClCX,EAAWG,SAASQ,cAAc,iBAExC,IAAIG,EAyBG,SAASmB,EAAsBC,GAC9BA,EACAH,EAAQ1B,UAAUC,IAAI,eAEtByB,EAAQ1B,UAAU8B,OAAO,cAEjC,CCvCA,MAAMC,EAAUjC,SAASkC,eAAe,WAClCC,EAAYnC,SAASkC,eAAe,cAEnC,SAASE,EAAiBC,GAC7BJ,SAAAA,EAAS/B,UAAU8B,OAAO,gBAC1BC,SAAAA,EAAS/B,UAAU8B,OAAO,iBAC1BG,EAAWG,YAAcD,CAC7B,CAEO,SAASE,EAAcC,GACX,WAAXA,GACAL,EAAWG,YAAc,WACzBL,SAAAA,EAAS/B,UAAUC,IAAI,kBAEvBgC,EAAWG,YAAc,YACzBL,SAAAA,EAAS/B,UAAUC,IAAI,iBAE/B,CCZA,MAAM,EAAUH,SAASQ,cAAc,kBACjC,EAAWR,SAASQ,cAAc,mBAClC,EAAWR,SAASQ,cAAc,mBAExC,IACI,EACAiC,EA2BG,SAASC,EAAwBX,GAChCA,EACA,EAAQ7B,UAAUC,IAAI,eAEtB,EAAQD,UAAU8B,OAAO,cAEjC,CAEO,SAASW,EAAkBC,GAC9BH,EAAiBG,EACjB,EAAQxC,aAAa,cAAe,GAAKwC,EAC7C,CAEA,SAASC,EAAiBC,GACtB,MAAMrD,EAAOqD,EAAMlC,OC5BhB,IAAwB5B,EAAWC,ED8BjCwD,IAAkBhD,EAAKS,UAAUW,SAAS,mBC9BpB7B,GDkCjBS,EAAKyB,aAAa,UClCUjC,GDmC5BQ,EAAKyB,aAAa,UClC5B6B,EAAcpD,OAAOX,EAAGC,GDuCrB,SAA4ByB,EAAc1B,EAAWC,IAK5D,SAAoByB,EAAc1B,EAAWC,GACzC,MAAMoD,EAAQ3B,EAAMlB,SAASR,EAAGC,GAC1BQ,EAiBV,SAAiBT,EAAWC,GACxB,OAAO,EAAM+D,MAAKvD,GACdA,EAAKyB,aAAa,YAAc,GAAGlC,GACnCS,EAAKyB,aAAa,YAAc,GAAGjC,GAC3C,CArBiB,CAAQD,EAAGC,GAEV,QAAVoD,GAA6B,SAAVA,IACnB5C,EAAKS,UAAUC,IAAI,cAEL,SAAVkC,GACA5B,EAAQC,EAAO,EAAOjB,IAIhB,UAAV4C,GACA5C,EAAKS,UAAUC,IAAI,SAGvBV,EAAKS,UAAUC,IAAI,gBACvB,EArBI,CAAWO,EAAO1B,EAAGC,GACrBsB,EAAYG,EAAMhC,MAAO,EAC7B,CCzCIuE,CAAmBF,EAAe/D,EAAGC,GAEjC8D,EAAcpE,WACduE,IAMD,WACHpB,GAAsB,GACtBY,GAAwB,GACxBC,GAAkB,GAClBP,EAAiB,iBAEjB,MAAMe,EC9BH,SAAyBzC,GAC5B,MAAM0C,EAA0B,GAChC,IAAIC,GAAiB,IAErB,IAAK,IAAIrE,EAAI,EAAGA,EAAIf,EAAMC,KAAMc,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAMC,KAAMe,IAC5B,GAA6B,QAAzByB,EAAMlB,SAASR,EAAGC,GAAc,CAChC,MAAMqE,EAAaC,EAAS7C,EAAO1B,EAAGC,GACtCoE,EAAiBlE,KAAKqE,IAAIH,EAAgBC,GAC1CF,EAAW9E,KAAK,CAAEU,IAAGC,IAAGqE,c,CAKpC,OAAOF,EACFtC,QAAO2C,GAAKA,EAAEH,aAAeD,IAC7BK,KAAI,EAAG1E,IAAGC,QAAQ,CAAGD,IAAGC,OACjC,CDawB0E,CAAgBC,IAC9B,EAAE5E,EAAC,EAAEC,GAcf,SAAsB4E,GAClB,MAAMC,EAAWD,EAAYjG,OAAS,EAEhC8D,EAASmC,EADK1E,KAAKC,MAAMD,KAAKE,SAAWyE,IAG/C,MAAO,CAAE9E,EAAG0C,EAAO1C,EAAGC,EAAGyC,EAAOzC,EACpC,CApBqB8E,CAAaZ,IAsB3B,SAAgBzC,EAAc1B,EAAWC,GAC5CyB,EAAMf,OAAOX,EAAGC,GAEZyB,EAAM/B,YACNuE,GAER,EA3BIvD,CAAOiE,EAAa5E,EAAGC,GHFpB,SAA0ByB,EAAc1B,EAAWC,IAK1D,SAAoByB,EAAc1B,EAAWC,GACzC,MAAMQ,EAiBV,SAAiBT,EAAWC,GACxB,OAAO0B,EAAMqC,MAAKvD,GACdA,EAAKyB,aAAa,YAAc,GAAGlC,GACnCS,EAAKyB,aAAa,YAAc,GAAGjC,GAC3C,CArBiB+E,CAAQhF,EAAGC,GAClBoD,EAAQ3B,EAAMlB,SAASR,EAAGC,GAElB,QAAVoD,GAA6B,SAAVA,GACnB5C,EAAKS,UAAUC,IAAI,cACnBV,EAAKS,UAAUC,IAAI,gBAEL,SAAVkC,GACA5B,EAAQC,EAAOC,EAAOlB,IAET,UAAV4C,GACP5C,EAAKS,UAAUC,IAAI,SAGvBV,EAAKS,UAAUC,IAAI,gBACvB,CApBI8D,CAAWvD,EAAO1B,EAAGC,GACrBsB,EAAYG,EAAMhC,MAAOmB,EAC7B,CGAIqE,CAAiBN,EAAa5E,EAAGC,GAE7B2E,EAAYjF,WACZuE,KAEApB,GAAsB,GACtBY,GAAwB,GACxBC,GAAkB,GAClBP,EAAiB,eAEzB,CAvBQ+B,GD+BR,CEhCA,SAASZ,EAAS7C,EAAc1B,EAAWC,GACvC,OAWJ,SAAqByB,EAAc1B,EAAWC,GAC1C,MAAMmF,EAAiBjF,KAAKkF,OAAOC,EAAqB5D,IAExD,OAWJ,SAA+BA,EAAc1B,EAAWC,GACpD,OAAOD,EAAI,GAAKC,EAAI,GAAKsF,EAAM7D,EAAO1B,EAAI,EAAGC,EAAI,IAC1CD,EAAI,GAAKC,EAAIhB,EAAMC,KAAO,GAAKqG,EAAM7D,EAAO1B,EAAI,EAAGC,EAAI,IACvDA,EAAI,GAAKD,EAAIf,EAAMC,KAAO,GAAKqG,EAAM7D,EAAO1B,EAAI,EAAGC,EAAI,IACvDD,EAAIf,EAAMC,KAAO,GAAKe,EAAIhB,EAAMC,KAAO,GAAKqG,EAAM7D,EAAO1B,EAAI,EAAGC,EAAI,EAC/E,CAhBWuF,CAAsB9D,EAAO1B,EAAGC,IACmB,IAAnDwF,EAAkB/D,EAAO1B,EAAGC,EAAGmF,EAC1C,CAhBQM,CAAYhE,EAAO1B,EAAGC,IACf,IAiBf,SAA6ByB,EAAc1B,EAAWC,GAClD,OAAOD,EAAI,GAAKuF,EAAM7D,EAAO1B,EAAI,EAAGC,IAC7BA,EAAI,GAAKsF,EAAM7D,EAAO1B,EAAGC,EAAI,IAC7BD,EAAIf,EAAMC,KAAO,GAAKqG,EAAM7D,EAAO1B,EAAI,EAAGC,IAC1CA,EAAIhB,EAAMC,KAAO,GAAKqG,EAAM7D,EAAO1B,EAAGC,EAAI,EACrD,CAnBQ0F,CAAoBjE,EAAO1B,EAAGC,GACvB2F,IA+Bf,SAAgClE,EAAc1B,EAAWC,GACrD,IAAI4F,EAAW,EAEf,IAAK,MAAMjH,KAAU0G,EAAqB5D,GACtCmE,GAAYJ,EAAkB/D,EAAO1B,EAAGC,EAAGrB,GAAWA,EAG1D,OAAOiH,CACX,CApCWC,CAAuBpE,EAAO1B,EAAGC,EAC5C,CAyCA,SAASwF,EACL/D,EACA1B,EACAC,EACArB,GAEA,GAAIA,EAASJ,EAAKC,WAAaG,EAASJ,EAAKE,UACzC,MAAM,IAAIG,MAAM,yBAA2BD,GAG/C,MAAMmH,EAAU5F,KAAKqE,IAAI,EAAGxE,EAAIpB,EAAS,GACnCoH,EAAS7F,KAAKqE,IAAI,EAAGvE,EAAIrB,EAAS,GAClCqH,EAAW9F,KAAKkF,IAAI,EAAGrF,EAAIpB,EAAS,GACpCsH,EAAY/F,KAAKkF,IAAI,EAAGpF,EAAIrB,EAAS,GAE3C,IAAIuH,EAAU,EACVC,EAAU,EAEd,IAAK,IAAIjH,EAAI4G,EAAS5G,GAAK8G,EAAU9G,IAAK,CACtC,MAAMkE,EAAQ3B,EAAMlB,SAASrB,EAAGc,GAClB,QAAVoD,GAA6B,QAAVA,EACnB8C,IAAYC,EAAUD,EAAUC,EAAUD,EAE1CC,EAAU,C,CAIlB,MAAMC,EAAqBlG,KAAKqE,IAAI,EAAG2B,EAAUvH,EAAS,GAE1DuH,EAAU,EACVC,EAAU,EAEV,IAAK,IAAI/G,EAAI2G,EAAQ3G,GAAK6G,EAAW7G,IAAK,CACtC,MAAMgE,EAAQ3B,EAAMlB,SAASR,EAAGX,GAClB,QAAVgE,GAA6B,QAAVA,EACnB8C,IAAYC,EAAUD,EAAUC,EAAUD,EAE1CC,EAAU,C,CAIlB,MAAME,EAAmBnG,KAAKqE,IAAI,EAAG2B,EAAUvH,EAAS,GAExD,OAAOuB,KAAKqE,IAAI,EAAG6B,EAAqBC,EAC5C,CAEA,SAAShB,EAAqB5D,GAC1B,OAAOA,EAAMhC,MAAMoC,QAAOyE,IAAMA,EAAExH,SAAQ2F,KAAI6B,GAAKA,EAAE3H,QACzD,CAEA,SAAS2G,EAAM7D,EAAc1B,EAAWC,GACpC,MAAgC,QAAzByB,EAAMlB,SAASR,EAAGC,EAC7B,CD/HA,MAAMuG,EAAc,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAErC,IAAI5B,EACAb,EAEJ,MAAM0C,EAAczF,SAASkC,eAAe,cAGrC,SAASwD,IACZ9B,EAAc,IAAI3F,EAClB8E,EAAgB,IAAI9E,EACpB2F,EAAY9E,UAAU0G,GACtBzC,EAAcjE,UAAU0G,GHRrB,SAA8B9E,GACjCmB,EAAS/B,UAAY,GAErB,IAAK,IAAIb,EAAI,EAAGA,EAAIhB,EAAMC,KAAMe,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAIf,EAAMC,KAAMc,IAAK,CACjC,MAAMS,EAAOO,SAASC,cAAc,OACpCR,EAAKS,UAAUC,IAAI,QACnBV,EAAKW,aAAa,SAAU,GAAKpB,GACjCS,EAAKW,aAAa,SAAU,GAAKnB,GAC7ByB,EAAMnB,OAAOP,EAAGC,KAChBQ,EAAKS,UAAUC,IAAI,cACnBV,EAAKS,UAAUC,IAAI,iBAEvB0B,SAAAA,EAAUxB,YAAYZ,E,CAI9BG,EAAgBc,EAAMhC,MAAOmB,GAC7B+B,EAAQ1B,UAAUC,IAAI,eAEtBQ,EAAQgF,MAAMC,KAAK/D,EAASgE,iBAAiB,SACjD,CGZIC,CAAqBlC,GDNlB,SAA4BlD,GAC/B,EAASZ,UAAY,GAErB,IAAK,IAAIb,EAAI,EAAGA,EAAIhB,EAAMC,KAAMe,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAIf,EAAMC,KAAMc,IAAK,CACjC,MAAMS,EAAOO,SAASC,cAAc,OACpCR,EAAKS,UAAUC,IAAI,QACnBV,EAAKW,aAAa,SAAU,GAAKpB,GACjCS,EAAKW,aAAa,SAAU,GAAKnB,GACjCQ,EAAKsG,iBAAiB,QAASlD,GAC/B,WAAUxC,YAAYZ,E,CAI9BG,EAAgBc,EAAMhC,MAAO,GAC7B,EAAQ0B,aAAa,cAAe,QACpCqC,GAAiB,EAEjB,EAAQkD,MAAMC,KAAK,EAASC,iBAAiB,SACjD,CCZIG,CAAmBjD,GACnBX,EAAiB,cACrB,CAkDO,SAASc,IACZ,GAAIU,EAAYjF,YAAcoE,EAAcpE,WACxC,MAAMd,MAAM,0BAGZkF,EAAcpE,YACd4D,EAAc,UAGdqB,EAAYjF,YACZ4D,EAAc,YAGlBI,GAAkB,GAClBb,GAAsB,GACtBY,GAAwB,EAC5B,CA5EA+C,SAAAA,EAAaM,iBAAiB,SAAS,IAAML,MET7CA,G","sources":["webpack://battleship/./src/ts/model/Ship.ts","webpack://battleship/./src/ts/model/Board.ts","webpack://battleship/./src/view/Ships.ts","webpack://battleship/./src/view/Uncover.ts","webpack://battleship/./src/view/PlayerSide.ts","webpack://battleship/./src/view/Display.ts","webpack://battleship/./src/view/ComputerSide.ts","webpack://battleship/./src/Controller.ts","webpack://battleship/./src/AI.ts","webpack://battleship/./src/index.ts"],"sourcesContent":["export class Ship {\n    static #MIN_LENGTH = 1\n    static #MAX_LENGTH = 5\n\n    static get minLength() {\n        return Ship.#MIN_LENGTH\n    }\n\n    static get maxLength() {\n        return Ship.#MAX_LENGTH\n    }\n\n    #length: number\n    #numberOfHits: number\n\n    constructor(length: number) {\n        if (length < Ship.#MIN_LENGTH || length > Ship.#MAX_LENGTH) {\n            throw new Error('Ship length out of bounds: ' + length)\n        }\n        this.#length = length\n        this.#numberOfHits = 0\n    }\n\n    get length() {\n        return this.#length\n    }\n\n    get isSunk() {\n        return this.#length <= this.#numberOfHits\n    }\n\n    hit() {\n        if (!this.isSunk) {\n            this.#numberOfHits++\n        }\n    }\n}","import { Ship } from \"./Ship\"\n\nexport type State = \"fog\" | \"water\" | \"hit\" | \"sunk\"\ninterface Cell { shipId: number, isFog: boolean, isClear: boolean }\n\nexport type Orientation = 'horizontal' | 'vertical'\n\nexport class Board {\n    static #SIZE = 10\n\n    static get Size() {\n        return Board.#SIZE\n    }\n\n    #ships: Ship[]\n    #cells: Cell[][]\n\n    constructor() {\n        this.#ships = []\n        this.#cells = []\n\n        for (let i = 0; i < Board.#SIZE; i++) {\n            const row = []\n            for (let j = 0; j < Board.#SIZE; j++) {\n                row.push({ shipId: -1, isFog: true, isClear: false })\n            }\n            this.#cells.push(row)\n        }\n    }\n\n    get ships() {\n        return this.#ships\n    }\n\n    get allAreSunk() {\n        return this.#ships.every(ship => ship.isSunk)\n    }\n\n    randomize(lengths: number[]) {\n        for (const length of lengths) {\n            const ship = new Ship(length)\n            let x: number\n            let y: number\n            let orientation: Orientation\n\n            do {\n                x = Math.round(Math.random() * 9)\n                y = Math.round(Math.random() * 9)\n                orientation = Math.random() > .5 ? 'horizontal' : 'vertical'\n            } while(!this.#isValidPlacement(ship, x, y, orientation))\n\n            this.place(ship, x, y, orientation)\n        }\n    }\n\n    isShip(x: number, y: number) {\n        return this.#cells[x][y].shipId >= 0\n    }\n\n    getState(x: number, y: number) {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (cell.isFog) {\n            return \"fog\"\n        } else if (cell.shipId === -1) {\n            return \"water\"\n        } else if (this.#ships[cell.shipId].isSunk) {\n            return \"sunk\"\n        } else {\n            return \"hit\"\n        }\n    }\n\n    place(ship: Ship, x: number, y: number, orientation: Orientation) {\n        this.#validateCoordinate(x, y)\n\n        if (!this.#isValidPlacement(ship, x, y, orientation)) {\n            throw new Error(`Invalid ship placement: ${x}, ${y}`)\n        }\n\n        this.#ships.push(ship)\n        const id = this.#ships.length - 1\n\n        for (let i = 0; i < ship.length; i++) {\n            if (orientation === 'horizontal') {\n                this.#cells[x + i][y].shipId = id\n            } else {\n                this.#cells[x][y + i].shipId = id\n            }\n        }\n    }\n\n    attack(x: number, y: number) {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (!cell.isFog) {\n            throw new Error(`Cell already received an attack: ${x}, ${y}`)\n        }\n\n        cell.isFog = false\n\n        if (cell.shipId < 0) {\n            return\n        }\n\n        const ship = this.#ships[cell.shipId]\n\n        ship.hit()\n\n        if (ship.isSunk) {\n            this.#clear(x, y)\n        }\n    }\n\n    #clear(x: number, y: number) {\n        const cell = this.#cells[x][y]\n\n        if (cell.isClear) {\n            return\n        }\n\n        cell.isFog = false\n        cell.isClear = true\n\n        if (cell.shipId >= 0) {\n            for (const neighbor of this.#getNeighbors(x, y)) {\n                this.#clear(neighbor.x, neighbor.y)\n            }\n        }\n    }\n\n    #getNeighbors(x: number, y: number) {\n        const result: { x: number, y: number }[] = []\n\n        if (x > 0) {\n            result.push({ x: x - 1, y: y })\n        }\n\n        if (x < Board.#SIZE - 1) {\n            result.push({ x: x + 1, y: y })\n        }\n\n        if (y > 0) {\n            result.push({ x: x, y: y - 1 })\n        }\n\n        if (y < Board.#SIZE - 1) {\n            result.push({ x: x, y: y + 1 })\n        }\n\n        if (x > 0 && y > 0) {\n            result.push({ x: x - 1, y: y - 1 })\n        }\n\n        if (x > 0 && y < Board.#SIZE - 1) {\n            result.push({ x: x - 1, y: y + 1 })\n        }\n\n        if (x < Board.#SIZE - 1 && y < Board.#SIZE - 1) {\n            result.push({ x: x + 1, y: y + 1 })\n        }\n\n        if (x < Board.#SIZE - 1 && y > 0) {\n            result.push({ x: x + 1, y: y - 1 })\n        }\n\n        return result\n    }\n\n    #isValidPlacement(\n        ship: Ship,\n        x: number,\n        y: number,\n        orientation: Orientation\n    ) {\n        const isHorizontal = orientation === 'horizontal'\n        if ((isHorizontal && x + ship.length > Board.#SIZE) ||\n            (!isHorizontal && y + ship.length > Board.#SIZE)\n        ) {\n            return false\n        }\n\n        for (let i = -1; i <= ship.length; i++) {\n            for (let j = -1; j <= +1; j++) {\n                let cell: Cell\n\n                try {\n                    if (isHorizontal) {\n                        cell = this.#cells[x + i][y + j]\n                    } else {\n                        cell = this.#cells[x + j][y + i]\n                    }\n                } catch {\n                    continue\n                }\n\n                if (cell?.shipId >= 0) {\n                    return false\n                }\n            }\n        }\n\n        return true\n    }\n\n    #validateCoordinate(x: number, y: number) {\n        if (x < 0 || y < 0 || x >= Board.#SIZE || y >= Board.#SIZE) {\n            throw new Error(`Invalid coordinate: ${x}, ${y}`)\n        }\n    }\n}","import { Ship } from \"../ts/model/Ship\";\n\nexport function initializeShips(ships: Ship[], divShips: HTMLDivElement) {\n    divShips.innerHTML = ''\n\n    for (let id = 0; id < ships.length; id++) {\n        const divShip = document.createElement('div')\n        divShip.classList.add('ship')\n        divShip.setAttribute('data-id', \"\"+id)\n        divShips.appendChild(divShip)\n\n        for (let i = 0; i < ships[id].length; i++) {\n            const square = document.createElement('div')\n            square.classList.add('square')\n            divShip.appendChild(square)\n        }\n    }\n}\n\nexport function updateShips(ships: Ship[], divShips: HTMLDivElement) {\n    for (let id = 0; id < ships.length; id++) {\n        if (ships[id].isSunk) {\n            const divShip = divShips.querySelector(`.ship[data-id=\"${id}\"`) as HTMLDivElement\n            divShip.classList.add('ship--sunk')\n        }\n    }\n}","import { Board } from \"../ts/model/Board\"\n\nexport function uncover(board: Board, cells: Element[], target: Element) {\n    if (target.classList.contains('cell--sunk')) {\n        return\n    }\n\n    target.classList.add('cell--cleared')\n\n    if (target.classList.contains('cell--ship')) {\n        target.classList.add('cell--sunk')\n        const neighbors = cells.filter(cell => areNeighbors(target, cell))\n        neighbors.forEach(neighbor => uncover(board, cells, neighbor))\n    } else if (!target.classList.contains('water')) {\n        target.classList.add('water')\n    }\n}\n\nfunction areNeighbors(thisCell: Element, thatCell: Element) {\n    const thisX = thisCell.getAttribute('data-x') as string\n    const thisY = thisCell.getAttribute('data-y') as string\n    const thatX = thatCell.getAttribute('data-x') as string\n    const thatY = thatCell.getAttribute('data-y') as string\n\n    return Math.abs(+thisX - +thatX) <= 1\n        && Math.abs(+thisY - +thatY) <= 1\n}","import { Board } from \"../ts/model/Board\"\nimport { initializeShips, updateShips } from \"./Ships\"\nimport { uncover } from \"./Uncover\"\n\nconst divSide = document.querySelector('#player-side') as HTMLDivElement\nconst divBoard = document.querySelector('#player-board') as HTMLDivElement\nconst divShips = document.querySelector('#player-ships') as HTMLDivElement\n\nlet cells: Element[]\n\nexport function initializePlayerSide(board: Board) {\n    divBoard.innerHTML = ''\n\n    for (let y = 0; y < Board.Size; y++) {\n        for (let x = 0; x < Board.Size; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            if (board.isShip(x, y)) {\n                cell.classList.add('cell--ship')\n                cell.classList.add('cell--player')\n            }\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n    divSide.classList.add('transparent')\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function setPlayerTransparency(isTransparent: boolean) {\n    if (isTransparent) {\n        divSide.classList.add('transparent')\n    } else {\n        divSide.classList.remove('transparent')\n    }\n}\n\nexport function updatePlayerSide(board: Board, x: number, y: number) {\n    updateCell(board, x, y)\n    updateShips(board.ships, divShips)\n}\n\nfunction updateCell(board: Board, x: number, y: number) {\n    const cell = getCell(x, y)\n    const state = board.getState(x, y)\n\n    if (state === 'hit' || state === 'sunk') {\n        cell.classList.add('cell--ship')\n        cell.classList.add('cell--player')\n\n        if (state === 'sunk') {\n            uncover(board, cells, cell)\n        }\n    } else if (state === 'water') {\n        cell.classList.add('water')\n    }\n\n    cell.classList.add('cell--cleared')\n}\n\nfunction getCell(x: number, y: number) {\n    return cells.find(cell =>\n        cell.getAttribute('data-x') === ''+x &&\n        cell.getAttribute('data-y') === ''+y) as HTMLDivElement\n}","const display = document.getElementById('display')\nconst gameState = document.getElementById('game-state')\n\nexport function displayGameState(state: string) {\n    display?.classList.remove('display--won')\n    display?.classList.remove('display--lost')\n    gameState!.textContent = state\n}\n\nexport function displayWinner(winner: 'Player' | 'Computer') {\n    if (winner === \"Player\") {\n        gameState!.textContent = 'You won!'\n        display?.classList.add('display--won')\n    } else {\n        gameState!.textContent = 'You lost!'\n        display?.classList.add('display--lost')\n    }\n}","import { attackComputer } from \"../Controller\"\nimport { Board } from \"../ts/model/Board\"\nimport { initializeShips, updateShips } from \"./Ships\"\nimport { uncover } from \"./Uncover\"\n\nconst divSide = document.querySelector('#computer-side') as HTMLDivElement\nconst divBoard = document.querySelector('#computer-board') as HTMLDivElement\nconst divShips = document.querySelector('#computer-ships') as HTMLDivElement\n\nlet board: Board\nlet cells: Element[]\nlet playerIsActive: boolean\n\nexport function initializeComputer(board: Board) {\n    divBoard.innerHTML = ''\n\n    for (let y = 0; y < Board.Size; y++) {\n        for (let x = 0; x < Board.Size; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            cell.addEventListener('click', initializeAttack)\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n    divSide.setAttribute('data-active', 'true')\n    playerIsActive = true\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function playerWon() {\n    return board.allAreSunk\n}\n\nexport function setComputerTransparency(isTransparent: boolean) {\n    if (isTransparent) {\n        divSide.classList.add('transparent')\n    } else {\n        divSide.classList.remove('transparent')\n    }\n}\n\nexport function setPlayerActivity(isActive: boolean) {\n    playerIsActive = isActive\n    divSide.setAttribute('data-active', '' + isActive)\n}\n\nfunction initializeAttack(event: Event) {\n    const cell = event.target as Element\n\n    if (!playerIsActive || cell.classList.contains('cell--cleared')) {\n        return\n    }\n\n    const x = cell.getAttribute('data-x') as string\n    const y = cell.getAttribute('data-y') as string\n\n    attackComputer(+x, +y)\n}\n\nexport function updateComputerSide(board: Board, x: number, y: number) {\n    updateCell(board, x, y)\n    updateShips(board.ships, divShips)\n}\n\nfunction updateCell(board: Board, x: number, y: number) {\n    const state = board.getState(x, y)\n    const cell = getCell(x, y)\n\n    if (state === 'hit' || state === 'sunk') {\n        cell.classList.add('cell--ship')\n\n        if (state === 'sunk') {\n            uncover(board, cells, cell)\n        }\n    }\n\n    if (state === 'water') {\n        cell.classList.add('water')\n    }\n\n    cell.classList.add('cell--cleared')\n}\n\nfunction getCell(x: number, y: number) {\n    return cells.find(cell =>\n        cell.getAttribute('data-x') === ''+x &&\n        cell.getAttribute('data-y') === ''+y) as HTMLDivElement\n}","import { initializePlayerSide, setPlayerTransparency, updatePlayerSide } from './view/PlayerSide'\nimport { displayGameState, displayWinner } from './view/Display'\nimport { initializeComputer, setComputerTransparency, setPlayerActivity, updateComputerSide } from './view/ComputerSide'\nimport { Board } from './ts/model/Board'\nimport { findBestTargets } from './AI'\n\nconst shipLengths = [ 5, 4, 3, 3, 2, 2 ]\n\nlet playerBoard: Board\nlet computerBoard: Board\n\nconst buttonStart = document.getElementById('start-over')\nbuttonStart?.addEventListener('click', () => initialize())\n\nexport function initialize() {\n    playerBoard = new Board()\n    computerBoard = new Board()\n    playerBoard.randomize(shipLengths)\n    computerBoard.randomize(shipLengths)\n    initializePlayerSide(playerBoard)\n    initializeComputer(computerBoard)\n    displayGameState('Player turn')\n}\n\nexport function attackComputer(x: number, y: number) {\n    computerBoard.attack(x, y)\n    updateComputerSide(computerBoard, x, y)\n\n    if (computerBoard.allAreSunk) {\n        handleGameOver()\n    } else {\n        attackPlayer()\n    }\n}\n\nexport function attackPlayer() {\n    setPlayerTransparency(false)\n    setComputerTransparency(true)\n    setPlayerActivity(false)\n    displayGameState('Computer turn')\n\n    const bestTargets = findBestTargets(playerBoard)\n    const { x, y } = pickAtRandom(bestTargets)\n    attack(playerBoard, x, y)\n    updatePlayerSide(playerBoard, x, y)\n\n    if (playerBoard.allAreSunk) {\n        handleGameOver()\n    } else {\n        setPlayerTransparency(true)\n        setComputerTransparency(false)\n        setPlayerActivity(true)\n        displayGameState('Player turn')\n    }\n}\n\nfunction pickAtRandom(coordinates: { x: number, y: number }[]) {\n    const maxIndex = coordinates.length - 1\n    const randomIndex = Math.round(Math.random() * maxIndex)\n    const result = coordinates[randomIndex]\n\n    return { x: result.x, y: result.y }\n}\n\nexport function attack(board: Board, x: number, y: number) {\n    board.attack(x, y)\n\n    if (board.allAreSunk) {\n        handleGameOver()\n    }\n}\n\nexport function handleGameOver() {\n    if (playerBoard.allAreSunk && computerBoard.allAreSunk) {\n        throw Error('Indecisive game result')\n    }\n\n    if (computerBoard.allAreSunk) {\n        displayWinner('Player')\n    }\n\n    if (playerBoard.allAreSunk) {\n        displayWinner('Computer')\n    }\n\n    setPlayerActivity(false)\n    setPlayerTransparency(false)\n    setComputerTransparency(false)\n}\n","import { Board } from \"./ts/model/Board\"\nimport { Ship } from \"./ts/model/Ship\"\n\ntype Candidate = { x: number, y: number, evaluation: number }\n\n/**\n * Finds the best coordinates to attack for the current state of the board.\n *\n * This is done by evaluating the importance of all the remaining coordinates\n * and returning the ones with the highest evaluation.\n */\nexport function findBestTargets(board: Board): { x: number, y: number }[] {\n    const candidates: Candidate[] = []\n    let bestEvaluation = -Infinity\n\n    for (let x = 0; x < Board.Size; x++) {\n        for (let y = 0; y < Board.Size; y++) {\n            if (board.getState(x, y) === 'fog') {\n                const evaluation = evaluate(board, x, y)\n                bestEvaluation = Math.max(bestEvaluation, evaluation)\n                candidates.push({ x, y, evaluation })\n            }\n        }\n    }\n\n    return candidates\n        .filter(c => c.evaluation === bestEvaluation)\n        .map(({ x, y }) => ({ x, y }))\n}\n\nfunction evaluate(board: Board, x: number, y: number) {\n    if (mustBeWater(board, x, y)) {\n        return -Infinity\n    }\n\n    if (directNeighborIsHit(board, x, y)) {\n        return Infinity\n    }\n\n    return calculateTotalCapacity(board, x, y)\n}\n\nfunction mustBeWater(board: Board, x: number, y: number) {\n    const smallestLength = Math.min(...getShipLengthsInPlay(board))\n\n    return diagonalNeighborIsHit(board, x, y)\n        || calculateCapacity(board, x, y, smallestLength) === 0\n}\n\nfunction directNeighborIsHit(board: Board, x: number, y: number) {\n    return x > 0 && isHit(board, x - 1, y)\n        || y > 0 && isHit(board, x, y - 1)\n        || x < Board.Size - 1 && isHit(board, x + 1, y)\n        || y < Board.Size - 1 && isHit(board, x, y + 1)\n}\n\nfunction diagonalNeighborIsHit(board: Board, x: number, y: number) {\n    return x > 0 && y > 0 && isHit(board, x - 1, y - 1)\n        || x > 0 && y < Board.Size - 1 && isHit(board, x - 1, y + 1)\n        || y > 0 && x < Board.Size - 1 && isHit(board, x + 1, y - 1)\n        || x < Board.Size - 1 && y < Board.Size - 1 && isHit(board, x + 1, y + 1)\n}\n\n/**\n * Calculates how many ways there are to fit any of the remaining ships\n * through the given coordinate, weighted by the length of the respective ship.\n */\nfunction calculateTotalCapacity(board: Board, x: number, y: number) {\n    let capacity = 0\n\n    for (const length of getShipLengthsInPlay(board)) {\n        capacity += calculateCapacity(board, x, y, length)  * length\n    }\n\n    return capacity\n}\n\n/**\n * Calculates how many ways there are to fit a ship\n * with the given length through the given coordinate.\n */\nfunction calculateCapacity(\n    board: Board,\n    x: number,\n    y: number,\n    length: number\n) {\n    if (length < Ship.minLength || length > Ship.maxLength) {\n        throw new Error('Length out of bounds: ' + length)\n    }\n\n    const leftEnd = Math.max(0, x - length + 1)\n    const topEnd = Math.max(0, y - length + 1)\n    const rightEnd = Math.min(9, x + length - 1)\n    const bottomEnd = Math.min(9, y + length - 1)\n\n    let longest = 0\n    let current = 0\n\n    for (let i = leftEnd; i <= rightEnd; i++) {\n        const state = board.getState(i, y)\n        if (state === 'fog' || state === 'hit') {\n            longest = ++current > longest ? current : longest\n        } else {\n            current = 0\n        }\n    }\n\n    const horizontalCapacity = Math.max(0, longest - length + 1)\n\n    longest = 0\n    current = 0\n\n    for (let j = topEnd; j <= bottomEnd; j++) {\n        const state = board.getState(x, j)\n        if (state === 'fog' || state === 'hit') {\n            longest = ++current > longest ? current : longest\n        } else {\n            current = 0\n        }\n    }\n\n    const verticalCapacity = Math.max(0, longest - length + 1)\n\n    return Math.max(0, horizontalCapacity + verticalCapacity)\n}\n\nfunction getShipLengthsInPlay(board: Board) {\n    return board.ships.filter(s => !s.isSunk).map(s => s.length)\n}\n\nfunction isHit(board: Board, x: number, y: number) {\n    return board.getState(x, y) === \"hit\"\n}","import './styles.scss'\nimport { initialize } from './Controller'\n\ninitialize()"],"names":["Ship","minLength","maxLength","constructor","length","Error","this","isSunk","hit","Board","Size","i","row","j","push","shipId","isFog","isClear","ships","allAreSunk","every","ship","randomize","lengths","x","y","orientation","Math","round","random","place","isShip","getState","cell","id","attack","initializeShips","divShips","innerHTML","divShip","document","createElement","classList","add","setAttribute","appendChild","square","updateShips","querySelector","uncover","board","cells","target","contains","filter","thisCell","thatCell","thisX","getAttribute","thisY","thatX","thatY","abs","areNeighbors","forEach","neighbor","result","isHorizontal","divSide","divBoard","setPlayerTransparency","isTransparent","remove","display","getElementById","gameState","displayGameState","state","textContent","displayWinner","winner","playerIsActive","setComputerTransparency","setPlayerActivity","isActive","initializeAttack","event","computerBoard","find","updateComputerSide","handleGameOver","bestTargets","candidates","bestEvaluation","evaluation","evaluate","max","c","map","findBestTargets","playerBoard","coordinates","maxIndex","pickAtRandom","getCell","updateCell","updatePlayerSide","attackPlayer","smallestLength","min","getShipLengthsInPlay","isHit","diagonalNeighborIsHit","calculateCapacity","mustBeWater","directNeighborIsHit","Infinity","capacity","calculateTotalCapacity","leftEnd","topEnd","rightEnd","bottomEnd","longest","current","horizontalCapacity","verticalCapacity","s","shipLengths","buttonStart","initialize","Array","from","querySelectorAll","initializePlayerSide","addEventListener","initializeComputer"],"sourceRoot":""}
{"version":3,"file":"main.3d7e87f9e8a395e32d33.js","mappings":"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","sources":["webpack://battleship/./src/ts/model/Ship.ts","webpack://battleship/./src/ts/model/Board.ts","webpack://battleship/./src/AI.ts","webpack://battleship/./src/view/Ships.ts","webpack://battleship/./src/view/Uncover.ts","webpack://battleship/./src/view/Player.ts","webpack://battleship/./src/view/Display.ts","webpack://battleship/./src/view/Computer.ts","webpack://battleship/./src/Controller.ts","webpack://battleship/./src/index.ts"],"sourcesContent":["export class Ship {\n    static #MIN_LENGTH = 1\n    static #MAX_LENGTH = 5\n\n    #length: number\n    #numberOfHits: number\n\n    constructor(length: number) {\n        if (length < Ship.#MIN_LENGTH || length > Ship.#MAX_LENGTH) {\n            throw new Error('Ship length out of bounds')\n        }\n        this.#length = length\n        this.#numberOfHits = 0\n    }\n\n    get length() {\n        return this.#length\n    }\n\n    get isSunk() {\n        return this.#length <= this.#numberOfHits\n    }\n\n    hit() {\n        if (!this.isSunk) {\n            this.#numberOfHits++\n        }\n    }\n}","import { Ship } from \"./Ship\"\n\nexport interface Cell { shipId: number, gotAttacked: boolean }\nexport interface Response { isShip: boolean, isSunk: boolean }\nexport type State = \"unknown\" | \"miss\" | \"hit\" | \"sunk\"\n\nexport type Orientation = 'horizontal' | 'vertical'\n\nexport class Board {\n    static #SIZE = 10\n\n    static get Size() {\n        return Board.#SIZE\n    }\n\n    #ships: Ship[]\n    #cells: Cell[][]\n\n    constructor() {\n        this.#ships = []\n        this.#cells = []\n\n        for (let i = 0; i < Board.#SIZE; i++) {\n            const row = []\n            for (let j = 0; j < Board.#SIZE; j++) {\n                row.push({ shipId: -1, gotAttacked: false })\n            }\n            this.#cells.push(row)\n        }\n    }\n\n    get ships() {\n        return this.#ships\n    }\n\n    get allAreSunk() {\n        if (this.#ships.length === 0) {\n            return false\n        }\n\n        return this.#ships.filter(ship => !ship.isSunk).length === 0\n    }\n\n    randomize(lengths: number[]) {\n        for (const length of lengths) {\n            const ship = new Ship(length)\n            let x: number\n            let y: number\n            let orientation: Orientation\n\n            do {\n                x = Math.round(Math.random() * 9)\n                y = Math.round(Math.random() * 9)\n                orientation = Math.random() > .5 ? 'horizontal' : 'vertical'\n            } while(!this.#isValidPlacement(ship, x, y, orientation))\n\n            this.place(ship, x, y, orientation)\n        }\n    }\n\n    isShip(x: number, y: number) {\n        return this.#cells[x][y].shipId >= 0\n    }\n\n    getState(x: number, y: number) {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (!cell.gotAttacked) {\n            return \"unknown\"\n        } else if (cell.shipId === -1) {\n            return \"miss\"\n        } else if (this.#ships[cell.shipId].isSunk) {\n            return \"sunk\"\n        } else {\n            return \"hit\"\n        }\n    }\n\n    place(ship: Ship, x: number, y: number, orientation: Orientation) {\n        this.#validateCoordinate(x, y)\n\n        if (!this.#isValidPlacement(ship, x, y, orientation)) {\n            throw new Error('Invalid ship placement')\n        }\n\n        this.#ships.push(ship)\n        const id = this.#ships.length - 1\n\n        for (let i = 0; i < ship.length; i++) {\n            if (orientation === 'horizontal') {\n                this.#cells[x + i][y].shipId = id\n            } else {\n                this.#cells[x][y + i].shipId = id\n            }\n        }\n    }\n\n    attack(x: number, y: number): Response {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (cell.gotAttacked) {\n            throw new Error(`Cell already received an attack: ${x}, ${y}`)\n        }\n\n        cell.gotAttacked = true\n\n        if (cell.shipId >= 0) {\n            const ship = this.#ships[cell.shipId]\n            ship.hit()\n            return { isShip: true, isSunk: ship.isSunk }\n        } else {\n            return { isShip: false, isSunk: false }\n        }\n    }\n\n    #isValidPlacement(\n        ship: Ship,\n        x: number,\n        y: number,\n        orientation: Orientation\n    ) {\n        const isHorizontal = orientation === 'horizontal'\n        if ((isHorizontal && x + ship.length > Board.#SIZE) ||\n            (!isHorizontal && y + ship.length > Board.#SIZE)\n        ) {\n            return false\n        }\n\n        for (let i = -1; i <= ship.length; i++) {\n            for (let j = -1; j <= +1; j++) {\n                let cell: Cell\n\n                try {\n                    if (isHorizontal) {\n                        cell = this.#cells[x + i][y + j]\n                    } else {\n                        cell = this.#cells[x + j][y + i]\n                    }\n                } catch {\n                    continue\n                }\n\n                if (cell?.shipId >= 0) {\n                    return false\n                }\n            }\n        }\n\n        return true\n    }\n\n    #validateCoordinate(x: number, y: number) {\n        if (x < 0 || y < 0 || x >= Board.#SIZE || y >= Board.#SIZE) {\n            throw new Error(`Invalid coordinate: ${x}, ${y}`)\n        }\n    }\n}","import { Board } from \"./ts/model/Board\"\n\ntype Candidate = { x: number, y: number, value: number }\n\nconst rim = Board.Size - 1\n\nexport function findBestTargets(board: Board): { x: number, y: number }[] {\n    const candidates: Candidate[] = []\n    let best = -1\n\n    for (let x = 0; x < Board.Size; x++) {\n        for (let y = 0; y < Board.Size; y++) {\n            if (board.getState(x, y) === 'unknown') {\n                const value = evaluate(board, x, y)\n\n                if (value > best) {\n                    best = value\n                }\n\n                candidates.push({ x, y, value })\n            }\n        }\n    }\n\n    return candidates\n        .filter(c => c.value === best)\n        .map(({ x, y }) => ({ x, y }))\n}\n\nfunction evaluate(board: Board, x: number, y: number) {\n    if (diagonalNeighborIsHit(board, x, y)) {\n        return -1\n    } else if (directNeighborIsHit(board, x, y)) {\n        return 100\n    } else if (directNeighborIsMiss(board, x, y)) {\n        return 0\n    } else {\n        return 1\n    }\n}\n\nfunction diagonalNeighborIsHit(board: Board, x: number, y: number) {\n    return x > 0 && y > 0 && isHit(board, { x: x - 1, y: y - 1 })\n        || x > 0 && y < rim && isHit(board, { x: x - 1, y: y + 1 })\n        || y > 0 && x < rim && isHit(board, { x: x + 1, y: y - 1 })\n        || x < rim && y < rim && isHit(board, { x: x + 1, y: y + 1 })\n}\n\nfunction directNeighborIsHit(board: Board, x: number, y: number) {\n    return x > 0 && isHit(board, { x: x - 1, y: y })\n        || y > 0 && isHit(board, { x: x, y: y - 1 })\n        || x < rim && isHit(board, { x: x + 1, y: y })\n        || y < rim && isHit(board, { x: x, y: y + 1 })\n}\n\nfunction directNeighborIsMiss(board: Board, x: number, y: number) {\n    return x > 0 && isMiss(board, { x: x - 1, y: y })\n        || y > 0 && isMiss(board, { x: x, y: y - 1 })\n        || x < rim && isMiss(board, { x: x + 1, y: y })\n        || y < rim && isMiss(board, { x: x, y: y + 1 })\n}\n\nfunction isHit(board: Board, coordinate: { x: number, y: number }) {\n    return board.getState(coordinate.x, coordinate.y) === \"hit\"\n}\n\nfunction isMiss(board: Board, coordinate: { x: number, y: number }) {\n    return board.getState(coordinate.x, coordinate.y) === \"miss\"\n}","import { Ship } from \"../ts/model/Ship\";\n\nexport function initializeShips(ships: Ship[], divShips: HTMLDivElement) {\n    divShips.innerHTML = ''\n\n    for (let id = 0; id < ships.length; id++) {\n        const divShip = document.createElement('div')\n        divShip.classList.add('ship')\n        divShip.setAttribute('data-id', \"\"+id)\n        divShips.appendChild(divShip)\n\n        for (let i = 0; i < ships[id].length; i++) {\n            const square = document.createElement('div')\n            square.classList.add('square')\n            divShip.appendChild(square)\n        }\n    }\n}\n\nexport function updateShips(ships: Ship[], divShips: HTMLDivElement) {\n    for (let id = 0; id < ships.length; id++) {\n        if (ships[id].isSunk) {\n            const divShip = divShips.querySelector(`.ship[data-id=\"${id}\"`) as HTMLDivElement\n            divShip.classList.add('ship--sunk')\n        }\n    }\n}","import { Board } from \"../ts/model/Board\"\n\nexport function uncover(board: Board, cells: Element[], target: Element) {\n    if (target.classList.contains('cell--sunk')) {\n        return\n    }\n\n    if (target.classList.contains('cell--ship')) {\n        target.classList.add('cell--sunk')\n        const neighbors = cells.filter(cell => areNeighbors(target, cell))\n        neighbors.forEach(neighbor => uncover(board, cells, neighbor))\n    } else if (!target.classList.contains('water')) {\n        target.classList.add('water')\n        const coordinates = getCoordinates(target)\n        const response = board.attack(coordinates.x, coordinates.y)\n\n        if (response.isShip || response.isSunk) {\n            throw Error('Uncovered unexpected ship')\n        }\n    }\n}\n\nfunction areNeighbors(thisCell: Element, thatCell: Element) {\n    const thisX = thisCell.getAttribute('data-x') as string\n    const thisY = thisCell.getAttribute('data-y') as string\n    const thatX = thatCell.getAttribute('data-x') as string\n    const thatY = thatCell.getAttribute('data-y') as string\n\n    return Math.abs(+thisX - +thatX) <= 1\n        && Math.abs(+thisY - +thatY) <= 1\n}\n\nfunction getCoordinates(cell: Element) {\n    return {\n        x: +(cell.getAttribute('data-x') as string),\n        y: +(cell.getAttribute('data-y') as string)\n    }\n}","import { Board } from \"../ts/model/Board\"\nimport { findBestTargets } from \"../AI\"\nimport { initializeShips, updateShips } from \"./Ships\"\nimport { uncover } from \"./Uncover\"\n\nconst divSide = document.querySelector('#player-side') as HTMLDivElement\nconst divBoard = document.querySelector('#player-board') as HTMLDivElement\nconst divShips = document.querySelector('#player-ships') as HTMLDivElement\n\nlet board: Board\nlet cells: Element[]\n\nexport function initializePlayer(shipLengths: number[]) {\n    divBoard.innerHTML = ''\n    board = new Board()\n    board.randomize(shipLengths)\n\n    for (let y = 0; y < Board.Size; y++) {\n        for (let x = 0; x < Board.Size; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            if (board.isShip(x, y)) {\n                cell.classList.add('cell--ship')\n                cell.classList.add('cell--player')\n            }\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n    divSide.classList.add('transparent')\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function computerWon() {\n    return board.allAreSunk\n}\n\nexport function setPlayerTransparency(isTransparent: boolean) {\n    if (isTransparent) {\n        divSide.classList.add('transparent')\n    } else {\n        divSide.classList.remove('transparent')\n    }\n}\n\nexport function attackPlayer() {\n    const bestTargets = findBestTargets(board)\n    const { x, y } = pickAtRandom(bestTargets)\n    const isGameOver = attack(x, y)\n    updateShips(board.ships, divShips)\n\n    return isGameOver\n}\n\nfunction pickAtRandom(coordinates: { x: number, y: number }[]) {\n    const maxIndex = coordinates.length - 1\n    const randomIndex = Math.round(Math.random() * maxIndex)\n    const result = coordinates[randomIndex]\n\n    return { x: result.x, y: result.y }\n}\n\nfunction attack(x: number, y: number) {\n    const cell = getCell(x, y)\n    const response = board.attack(+x, +y)\n\n    if (response.isShip) {\n        cell.classList.add('cell--ship')\n        cell.classList.add('cell--player')\n\n        if (response.isSunk) {\n            uncover(board, cells, cell)\n        }\n    } else {\n        cell.classList.add('water')\n    }\n\n    cell.classList.add('cell--attacked')\n\n    return board.allAreSunk\n}\n\nfunction getCell(x: number, y: number) {\n    return cells.find(cell =>\n        cell.getAttribute('data-x') === ''+x &&\n        cell.getAttribute('data-y') === ''+y) as HTMLDivElement\n}","const display = document.getElementById('display')\nconst gameState = document.getElementById('game-state')\n\nexport function displayGameState(state: string) {\n    display?.classList.remove('display--won')\n    display?.classList.remove('display--lost')\n    gameState!.textContent = state\n}\n\nexport function displayWinner(winner: 'Player' | 'Computer') {\n    if (winner === \"Player\") {\n        gameState!.textContent = 'You won!'\n        display?.classList.add('display--won')\n    } else {\n        gameState!.textContent = 'You lost!'\n        display?.classList.add('display--lost')\n    }\n}","import { handleGameOver, makeComputerMove } from \"../Controller\"\nimport { Board } from \"../ts/model/Board\"\nimport { initializeShips, updateShips } from \"./Ships\"\nimport { uncover } from \"./Uncover\"\n\nconst divSide = document.querySelector('#computer-side') as HTMLDivElement\nconst divBoard = document.querySelector('#computer-board') as HTMLDivElement\nconst divShips = document.querySelector('#computer-ships') as HTMLDivElement\n\nlet board: Board\nlet cells: Element[]\n\nexport function initializeComputer(shipLengths: number[]) {\n    divBoard.innerHTML = ''\n    board = new Board()\n    board.randomize(shipLengths)\n\n    for (let y = 0; y < Board.Size; y++) {\n        for (let x = 0; x < Board.Size; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            cell.addEventListener('click', attack)\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n    divSide.setAttribute('data-active', 'true')\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function playerWon() {\n    return board.allAreSunk\n}\n\nexport function setComputerTransparency(isTransparent: boolean) {\n    if (isTransparent) {\n        divSide.classList.add('transparent')\n    } else {\n        divSide.classList.remove('transparent')\n    }\n}\n\nexport function setPlayerActivity(value: boolean) {\n    divSide.setAttribute('data-active', '' + value)\n}\n\nfunction attack(event: Event) {\n    const cell = event.target as Element\n\n    if (divSide.getAttribute('data-active') === \"false\" || cell.classList.contains('cell--attacked')) {\n        return\n    }\n\n    const x = cell.getAttribute('data-x') as string\n    const y = cell.getAttribute('data-y') as string\n\n    const response = board.attack(+x, +y)\n\n    if (response.isShip) {\n        cell.classList.add('cell--ship')\n\n        if (response.isSunk) {\n            uncover(board, cells, cell)\n        }\n    } else {\n        cell.classList.add('water')\n    }\n\n    cell.classList.add('cell--attacked')\n    updateShips(board.ships, divShips)\n\n    if (board.allAreSunk) {\n        handleGameOver()\n    } else {\n        makeComputerMove()\n    }\n}","import { computerWon, attackPlayer, initializePlayer, setPlayerTransparency } from './view/Player'\nimport { displayGameState, displayWinner } from './view/Display'\nimport { playerWon, initializeComputer, setComputerTransparency, setPlayerActivity } from './view/Computer'\n\nconst buttonStart = document.getElementById('start-over')\nlet gameIsOver = false\n\nbuttonStart?.addEventListener('click', () => initialize())\n\nexport function initialize() {\n    const shipLengths = [ 5, 4, 3, 3, 2, 2 ]\n    initializePlayer(shipLengths)\n    initializeComputer(shipLengths)\n    displayGameState('Player turn')\n}\n\nexport function makeComputerMove() {\n    setPlayerTransparency(false)\n    setComputerTransparency(true)\n    setPlayerActivity(false)\n    displayGameState('Computer turn')\n\n    setTimeout(() => {\n        gameIsOver = attackPlayer()\n\n        if (!gameIsOver) {\n            setPlayerTransparency(true)\n            setComputerTransparency(false)\n            setPlayerActivity(true)\n            displayGameState('Player turn')\n        } else {\n            handleGameOver()\n        }\n    }, Math.random() * 1500)\n}\n\nexport function handleGameOver() {\n    if (playerWon() && computerWon()) {\n        throw Error('Indecisive game result')\n    }\n\n    if (playerWon()) {\n        displayWinner('Player')\n    }\n\n    if (computerWon()) {\n        displayWinner('Computer')\n    }\n\n    setPlayerActivity(false)\n    setPlayerTransparency(false)\n    setComputerTransparency(false)\n}","import './styles.scss'\nimport { initialize } from './Controller'\n\n\ninitialize()"],"names":["Ship","constructor","length","Error","this","isSunk","hit","Board","Size","i","row","j","push","shipId","gotAttacked","ships","allAreSunk","filter","ship","randomize","lengths","x","y","orientation","Math","round","random","place","isShip","getState","cell","id","attack","isHorizontal","rim","evaluate","board","isHit","diagonalNeighborIsHit","directNeighborIsHit","isMiss","directNeighborIsMiss","coordinate","initializeShips","divShips","innerHTML","divShip","document","createElement","classList","add","setAttribute","appendChild","square","updateShips","querySelector","uncover","cells","target","contains","thisCell","thatCell","thisX","getAttribute","thisY","thatX","thatY","abs","areNeighbors","forEach","neighbor","coordinates","response","divSide","divBoard","computerWon","setPlayerTransparency","isTransparent","remove","display","getElementById","gameState","displayGameState","state","textContent","displayWinner","winner","playerWon","setComputerTransparency","setPlayerActivity","value","event","handleGameOver","setTimeout","gameIsOver","bestTargets","candidates","best","c","map","findBestTargets","maxIndex","result","pickAtRandom","isGameOver","find","getCell","attackPlayer","buttonStart","initialize","shipLengths","Array","from","querySelectorAll","initializePlayer","addEventListener","initializeComputer"],"sourceRoot":""}
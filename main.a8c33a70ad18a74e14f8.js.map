{"version":3,"file":"main.a8c33a70ad18a74e14f8.js","mappings":"qrBAAO,MAAMA,EAIEC,uBACP,OAAO,EAAAD,EAAI,QACf,CAEWE,uBACP,OAAO,EAAAF,EAAI,QACf,CAKAG,YAAYC,GACR,GAJJ,mBACA,mBAGQA,EAAS,EAAAJ,EAAI,UAAgBI,EAAS,EAAAJ,EAAI,SAC1C,MAAM,IAAIK,MAAM,6BAEpB,EAAAC,KAAI,EAAWF,EAAM,KACrB,EAAAE,KAAI,EAAiB,EAAC,IAC1B,CAEIF,aACA,OAAO,EAAAE,KAAI,MACf,CAEIC,aACA,OAAO,EAAAD,KAAI,QAAY,EAAAA,KAAI,MAC/B,CAEAE,M,MACSF,KAAKC,QACN,EAAAD,KAAA,OAAAA,KAAA,YAAoB,IAE5B,E,gCAlCO,SAAc,GACd,SAAc,G,sqBCMlB,MAAMG,EAGEC,kBACP,OAAO,EAAAD,EAAK,QAChB,CAKAN,c,YAHA,mBACA,mBAGI,EAAAG,KAAI,EAAU,GAAE,KAChB,EAAAA,KAAI,EAAU,GAAE,KAEhB,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAAF,EAAK,SAAQE,IAAK,CAClC,MAAMC,EAAM,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAAJ,EAAK,SAAQI,IAC7BD,EAAIE,KAAK,CAAEC,QAAS,EAAGC,aAAa,IAExC,EAAAV,KAAI,OAAQQ,KAAKF,E,CAEzB,CAEIK,YACA,OAAO,EAAAX,KAAI,MACf,CAEIY,iBACA,OAA2B,IAAvB,EAAAZ,KAAI,OAAQF,QAI2C,IAApD,EAAAE,KAAI,OAAQa,QAAOC,IAASA,EAAKb,SAAQH,MACpD,CAEAiB,UAAUC,GACN,IAAK,MAAMlB,KAAUkB,EAAS,CAC1B,MAAMF,EAAO,IAAIpB,EAAKI,GACtB,IAAImB,EACAC,EACAC,EAEJ,GACIF,EAAIG,KAAKC,MAAsB,EAAhBD,KAAKE,UACpBJ,EAAIE,KAAKC,MAAsB,EAAhBD,KAAKE,UACpBH,EAAcC,KAAKE,SAAW,GAAK,aAAe,kBAC7C,EAAAtB,KAAI,SAAkB,KAAtBA,KAAuBc,EAAMG,EAAGC,EAAGC,IAE5CnB,KAAKuB,MAAMT,EAAMG,EAAGC,EAAGC,E,CAE/B,CAEAK,OAAOP,EAAWC,GACd,OAAO,EAAAlB,KAAI,OAAQiB,GAAGC,GAAGT,QAAU,CACvC,CAEAgB,SAASR,EAAWC,GAChB,EAAAlB,KAAI,SAAoB,KAAxBA,KAAyBiB,EAAGC,GAE5B,MAAMQ,EAAO,EAAA1B,KAAI,OAAQiB,GAAGC,GAE5B,OAAKQ,EAAKhB,aAEkB,IAAjBgB,EAAKjB,OACL,OACA,EAAAT,KAAI,OAAQ0B,EAAKjB,QAAQR,OACzB,OAEA,MANA,SAQf,CAEAsB,MAAMT,EAAYG,EAAWC,EAAWC,GAGpC,GAFA,EAAAnB,KAAI,SAAoB,KAAxBA,KAAyBiB,EAAGC,IAEvB,EAAAlB,KAAI,SAAkB,KAAtBA,KAAuBc,EAAMG,EAAGC,EAAGC,GACpC,MAAM,IAAIpB,MAAM,2BAA2BkB,MAAMC,KAGrD,EAAAlB,KAAI,OAAQQ,KAAKM,GACjB,MAAMa,EAAK,EAAA3B,KAAI,OAAQF,OAAS,EAEhC,IAAK,IAAIO,EAAI,EAAGA,EAAIS,EAAKhB,OAAQO,IACT,eAAhBc,EACA,EAAAnB,KAAI,OAAQiB,EAAIZ,GAAGa,GAAGT,OAASkB,EAE/B,EAAA3B,KAAI,OAAQiB,GAAGC,EAAIb,GAAGI,OAASkB,CAG3C,CAEAC,OAAOX,EAAWC,GACd,EAAAlB,KAAI,SAAoB,KAAxBA,KAAyBiB,EAAGC,GAE5B,MAAMQ,EAAO,EAAA1B,KAAI,OAAQiB,GAAGC,GAE5B,GAAIQ,EAAKhB,YACL,MAAM,IAAIX,MAAM,oCAAoCkB,MAAMC,KAK9D,GAFAQ,EAAKhB,aAAc,EAEfgB,EAAKjB,QAAU,EAAG,CAClB,MAAMK,EAAO,EAAAd,KAAI,OAAQ0B,EAAKjB,QAE9B,OADAK,EAAKZ,MACE,CAAEsB,QAAQ,EAAMvB,OAAQa,EAAKb,O,CAEpC,MAAO,CAAEuB,QAAQ,EAAOvB,QAAQ,EAExC,E,yDAGIa,EACAG,EACAC,EACAC,GAEA,MAAMU,EAA+B,eAAhBV,EACrB,GAAKU,GAAgBZ,EAAIH,EAAKhB,OAAS,EAAAK,EAAK,WACtC0B,GAAgBX,EAAIJ,EAAKhB,OAAS,EAAAK,EAAK,SAEzC,OAAO,EAGX,IAAK,IAAIE,GAAK,EAAGA,GAAKS,EAAKhB,OAAQO,IAC/B,IAAK,IAAIE,GAAK,EAAGA,GAAK,EAAIA,IAAK,CAC3B,IAAImB,EAEJ,IAEQA,EADAG,EACO,EAAA7B,KAAI,OAAQiB,EAAIZ,GAAGa,EAAIX,GAEvB,EAAAP,KAAI,OAAQiB,EAAIV,GAAGW,EAAIb,E,CAEpC,SACE,Q,CAGJ,IAAIqB,aAAI,EAAJA,EAAMjB,SAAU,EAChB,OAAO,C,CAKnB,OAAO,CACX,EAAC,WAEmBQ,EAAWC,GAC3B,GAAID,EAAI,GAAKC,EAAI,GAAKD,GAAK,EAAAd,EAAK,UAAUe,GAAK,EAAAf,EAAK,SAChD,MAAM,IAAIJ,MAAM,uBAAuBkB,MAAMC,IAErD,EAtJO,SAAQ,ICJnB,MAAMY,EAAM3B,EAAMC,KAAO,EAyBzB,SAAS2B,EAASC,EAAcf,EAAWC,GACvC,MAAMe,EAA0BD,EAAMrB,MACjCE,QAAOqB,IAAMA,EAAEjC,SACfkC,KAAID,GAAKA,EAAEpC,SACXsC,OACAC,UAIL,IAqBJ,SAAcL,EAAcf,EAAWC,EAAWpB,GAC9C,OAAOwC,EAAkBN,EAAOf,EAAGC,EAAGpB,GAAU,CACpD,CAvBSyC,CAAKP,EAAOf,EAAGC,EAFSe,EAAwBO,OAAO,GAAG,KA6EnE,SAA+BR,EAAcf,EAAWC,GACpD,OAAOD,EAAI,GAAKC,EAAI,GAAKuB,EAAMT,EAAO,CAAEf,EAAGA,EAAI,EAAGC,EAAGA,EAAI,KAClDD,EAAI,GAAKC,EAAIY,GAAOW,EAAMT,EAAO,CAAEf,EAAGA,EAAI,EAAGC,EAAGA,EAAI,KACpDA,EAAI,GAAKD,EAAIa,GAAOW,EAAMT,EAAO,CAAEf,EAAGA,EAAI,EAAGC,EAAGA,EAAI,KACpDD,EAAIa,GAAOZ,EAAIY,GAAOW,EAAMT,EAAO,CAAEf,EAAGA,EAAI,EAAGC,EAAGA,EAAI,GACjE,CA/EQwB,CAAsBV,EAAOf,EAAGC,GAEhC,OAAO,IACJ,GA8EX,SAA6Bc,EAAcf,EAAWC,GAClD,OAAOD,EAAI,GAAKwB,EAAMT,EAAO,CAAEf,EAAGA,EAAI,EAAGC,EAAGA,KACrCA,EAAI,GAAKuB,EAAMT,EAAO,CAAEf,EAAGA,EAAGC,EAAGA,EAAI,KACrCD,EAAIa,GAAOW,EAAMT,EAAO,CAAEf,EAAGA,EAAI,EAAGC,EAAGA,KACvCA,EAAIY,GAAOW,EAAMT,EAAO,CAAEf,EAAGA,EAAGC,EAAGA,EAAI,GAClD,CAnFeyB,CAAoBX,EAAOf,EAAGC,GACrC,OAAO0B,IACJ,CACH,IAAIC,EAAW,EAEf,IAAK,MAAM/C,KAAUmC,EACjBY,GAAYP,EAAkBN,EAAOf,EAAGC,EAAGpB,GAAWA,EAG1D,OAAO+C,C,CAEf,CAEA,SAASJ,EAAMT,EAAcc,GACzB,MAAsD,QAA/Cd,EAAMP,SAASqB,EAAW7B,EAAG6B,EAAW5B,EACnD,CAUA,SAASoB,EACLN,EACAf,EACAC,EACApB,GAEA,GAAIA,EAASJ,EAAKC,WAAaG,EAASJ,EAAKE,UACzC,MAAM,IAAIG,MAAM,wBAGpB,MAAMgD,EAAU3B,KAAK4B,IAAI,EAAG/B,EAAInB,EAAS,GACnCmD,EAAS7B,KAAK4B,IAAI,EAAG9B,EAAIpB,EAAS,GAClCoD,EAAW9B,KAAK+B,IAAI,EAAGlC,EAAInB,EAAS,GACpCsD,EAAYhC,KAAK+B,IAAI,EAAGjC,EAAIpB,EAAS,GAE3C,IAAIuD,EAAU,EACVC,EAAU,EAEd,IAAK,IAAIjD,EAAI0C,EAAS1C,GAAK6C,EAAU7C,IAAK,CACtC,MAAMkD,EAAQvB,EAAMP,SAASpB,EAAGa,GAClB,YAAVqC,GAAiC,QAAVA,EACvBF,IAAYC,EAAUD,EAAUC,EAAUD,EAE1CC,EAAU,C,CAIlB,MAAME,EAAqBpC,KAAK4B,IAAI,EAAGK,EAAUvD,EAAS,GAE1DuD,EAAU,EACVC,EAAU,EAEV,IAAK,IAAI/C,EAAI0C,EAAQ1C,GAAK6C,EAAW7C,IAAK,CACtC,MAAMgD,EAAQvB,EAAMP,SAASR,EAAGV,GAClB,YAAVgD,GAAiC,QAAVA,EACvBF,IAAYC,EAAUD,EAAUC,EAAUD,EAE1CC,EAAU,C,CAIlB,MAAMG,EAAmBrC,KAAK4B,IAAI,EAAGK,EAAUvD,EAAS,GAExD,OAAOsB,KAAK4B,IAAI,EAAGQ,EAAqBC,EAC5C,CC9GO,SAASC,EAAgB/C,EAAegD,GAC3CA,EAASC,UAAY,GAErB,IAAK,IAAIjC,EAAK,EAAGA,EAAKhB,EAAMb,OAAQ6B,IAAM,CACtC,MAAMkC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAUC,IAAI,QACtBJ,EAAQK,aAAa,UAAW,GAAGvC,GACnCgC,EAASQ,YAAYN,GAErB,IAAK,IAAIxD,EAAI,EAAGA,EAAIM,EAAMgB,GAAI7B,OAAQO,IAAK,CACvC,MAAM+D,EAASN,SAASC,cAAc,OACtCK,EAAOJ,UAAUC,IAAI,UACrBJ,EAAQM,YAAYC,E,EAGhC,CAEO,SAASC,EAAY1D,EAAegD,GACvC,IAAK,IAAIhC,EAAK,EAAGA,EAAKhB,EAAMb,OAAQ6B,IAC5BhB,EAAMgB,GAAI1B,QACM0D,EAASW,cAAc,kBAAkB3C,MACjDqC,UAAUC,IAAI,aAGlC,CCxBO,SAASM,EAAQvC,EAAcwC,EAAkBC,GA8BxD,IAAwB/C,EA7BpB,IAAI+C,EAAOT,UAAUU,SAAS,cAI9B,GAAID,EAAOT,UAAUU,SAAS,cAC1BD,EAAOT,UAAUC,IAAI,cACHO,EAAM3D,QAAOa,GAavC,SAAsBiD,EAAmBC,GACrC,MAAMC,EAAQF,EAASG,aAAa,UAC9BC,EAAQJ,EAASG,aAAa,UAC9BE,EAAQJ,EAASE,aAAa,UAC9BG,EAAQL,EAASE,aAAa,UAEpC,OAAO1D,KAAK8D,KAAKL,GAASG,IAAU,GAC7B5D,KAAK8D,KAAKH,GAASE,IAAU,CACxC,CArB+CE,CAAaV,EAAQ/C,KAClD0D,SAAQC,GAAYd,EAAQvC,EAAOwC,EAAOa,UACjD,IAAKZ,EAAOT,UAAUU,SAAS,SAAU,CAC5CD,EAAOT,UAAUC,IAAI,SACrB,MAAMqB,EAoBH,CACHrE,IAFgBS,EAnBmB+C,GAqBzBK,aAAa,UACvB5D,GAAKQ,EAAKoD,aAAa,WArBjBS,EAAWvD,EAAMJ,OAAO0D,EAAYrE,EAAGqE,EAAYpE,GAEzD,GAAIqE,EAAS/D,QAAU+D,EAAStF,OAC5B,MAAMF,MAAM,4B,CAGxB,CCfA,MAAMyF,EAAU1B,SAASQ,cAAc,gBACjCmB,EAAW3B,SAASQ,cAAc,iBAClCX,EAAWG,SAASQ,cAAc,iBAExC,IAAItC,EACAwC,EA2BG,SAASkB,IACZ,OAAO1D,EAAMpB,UACjB,CAEO,SAAS+E,EAAsBC,GAC9BA,EACAJ,EAAQxB,UAAUC,IAAI,eAEtBuB,EAAQxB,UAAU6B,OAAO,cAEjC,CC/CA,MAAMC,EAAUhC,SAASiC,eAAe,WAClCC,EAAYlC,SAASiC,eAAe,cAEnC,SAASE,EAAiB1C,GAC7BuC,SAAAA,EAAS9B,UAAU6B,OAAO,gBAC1BC,SAAAA,EAAS9B,UAAU6B,OAAO,iBAC1BG,EAAWE,YAAc3C,CAC7B,CAEO,SAAS4C,EAAcC,GACX,WAAXA,GACAJ,EAAWE,YAAc,WACzBJ,SAAAA,EAAS9B,UAAUC,IAAI,kBAEvB+B,EAAWE,YAAc,YACzBJ,SAAAA,EAAS9B,UAAUC,IAAI,iBAE/B,CCZA,MAAM,EAAUH,SAASQ,cAAc,kBACjC,EAAWR,SAASQ,cAAc,mBAClC,EAAWR,SAASQ,cAAc,mBAExC,IAAI,EACA,EAwBG,SAAS+B,IACZ,OAAO,EAAMzF,UACjB,CAEO,SAAS0F,EAAwBV,GAChCA,EACA,EAAQ5B,UAAUC,IAAI,eAEtB,EAAQD,UAAU6B,OAAO,cAEjC,CAEO,SAASU,EAAkBC,GAC9B,EAAQtC,aAAa,cAAe,GAAKsC,EAC7C,CAEA,SAAS,EAAOC,GACZ,MAAM/E,EAAO+E,EAAMhC,OAEnB,GAA4C,UAAxC,EAAQK,aAAa,gBAA8BpD,EAAKsC,UAAUU,SAAS,kBAC3E,OAGJ,MAAMzD,EAAIS,EAAKoD,aAAa,UACtB5D,EAAIQ,EAAKoD,aAAa,UAEtBS,EAAW,EAAM3D,QAAQX,GAAIC,GAE/BqE,EAAS/D,QACTE,EAAKsC,UAAUC,IAAI,cAEfsB,EAAStF,QACTsE,EAAQ,EAAO,EAAO7C,IAG1BA,EAAKsC,UAAUC,IAAI,SAGvBvC,EAAKsC,UAAUC,IAAI,kBACnBI,EAAY,EAAM1D,MAAO,GAErB,EAAMC,WACN8F,KC3DJf,GAAsB,GACtBW,GAAwB,GACxBC,GAAkB,GAClBN,EAAiB,iBAEjBU,YAAW,KACPC,EH0BD,WACH,MAAMC,EH3CH,SAAyB7E,GAC5B,MAAM8E,EAA0B,GAChC,IAAIC,GAAiB,IAErB,IAAK,IAAI9F,EAAI,EAAGA,EAAId,EAAMC,KAAMa,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAMC,KAAMc,IAC5B,GAA6B,YAAzBc,EAAMP,SAASR,EAAGC,GAAkB,CACpC,MAAM8F,EAAajF,EAASC,EAAOf,EAAGC,GAElC8F,EAAaD,IACbA,EAAiBC,GAGrBF,EAAWtG,KAAK,CAAES,IAAGC,IAAG8F,WAAYA,G,CAKhD,OAAOF,EACFjG,QAAOoG,GAAKA,EAAED,aAAeD,IAC7B5E,KAAI,EAAGlB,IAAGC,QAAQ,CAAGD,IAAGC,OACjC,CGsBwBgG,CAAgBlF,IAC9B,EAAEf,EAAC,EAAEC,GAOf,SAAsBoE,GAClB,MAAM6B,EAAW7B,EAAYxF,OAAS,EAEhCsH,EAAS9B,EADKlE,KAAKC,MAAMD,KAAKE,SAAW6F,IAG/C,MAAO,CAAElG,EAAGmG,EAAOnG,EAAGC,EAAGkG,EAAOlG,EACpC,CAbqBmG,CAAaR,GACxBS,EAcV,SAAgBrG,EAAWC,GACvB,MAAMQ,EAmBV,SAAiBT,EAAWC,GACxB,OAAOsD,EAAM+C,MAAK7F,GACdA,EAAKoD,aAAa,YAAc,GAAG7D,GACnCS,EAAKoD,aAAa,YAAc,GAAG5D,GAC3C,CAvBiBsG,CAAQvG,EAAGC,GAClBqE,EAAWvD,EAAMJ,QAAQX,GAAIC,GAenC,OAbIqE,EAAS/D,QACTE,EAAKsC,UAAUC,IAAI,cACnBvC,EAAKsC,UAAUC,IAAI,gBAEfsB,EAAStF,QACTsE,EAAQvC,EAAOwC,EAAO9C,IAG1BA,EAAKsC,UAAUC,IAAI,SAGvBvC,EAAKsC,UAAUC,IAAI,kBAEZjC,EAAMpB,UACjB,CAhCuBgB,CAAOX,EAAGC,GAG7B,OAFAmD,EAAYrC,EAAMrB,MAAOgD,GAElB2D,CACX,CGjCqBG,GAERb,EAMDF,KALAf,GAAsB,GACtBW,GAAwB,GACxBC,GAAkB,GAClBN,EAAiB,e,GAIN,KAAhB7E,KAAKE,UD+CZ,CC5EA,MAAMoG,EAAc5D,SAASiC,eAAe,cAC5C,IAAIa,GAAa,EAIV,SAASe,IACZ,MAAMC,EAAc,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,IHElC,SAA0BA,GAC7BnC,EAAS7B,UAAY,GACrB5B,EAAQ,IAAI7B,EACZ6B,EAAMjB,UAAU6G,GAEhB,IAAK,IAAI1G,EAAI,EAAGA,EAAIf,EAAMC,KAAMc,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAId,EAAMC,KAAMa,IAAK,CACjC,MAAMS,EAAOoC,SAASC,cAAc,OACpCrC,EAAKsC,UAAUC,IAAI,QACnBvC,EAAKwC,aAAa,SAAU,GAAKjD,GACjCS,EAAKwC,aAAa,SAAU,GAAKhD,GAC7Bc,EAAMR,OAAOP,EAAGC,KAChBQ,EAAKsC,UAAUC,IAAI,cACnBvC,EAAKsC,UAAUC,IAAI,iBAEvBwB,SAAAA,EAAUtB,YAAYzC,E,CAI9BgC,EAAgB1B,EAAMrB,MAAOgD,GAC7B6B,EAAQxB,UAAUC,IAAI,eAEtBO,EAAQqD,MAAMC,KAAKrC,EAASsC,iBAAiB,SACjD,CGxBIC,CAAiBJ,GDCd,SAA4BA,GAC/B,EAAShE,UAAY,GACrB,EAAQ,IAAIzD,EACZ,EAAMY,UAAU6G,GAEhB,IAAK,IAAI1G,EAAI,EAAGA,EAAIf,EAAMC,KAAMc,IAC5B,IAAK,IAAID,EAAI,EAAGA,EAAId,EAAMC,KAAMa,IAAK,CACjC,MAAMS,EAAOoC,SAASC,cAAc,OACpCrC,EAAKsC,UAAUC,IAAI,QACnBvC,EAAKwC,aAAa,SAAU,GAAKjD,GACjCS,EAAKwC,aAAa,SAAU,GAAKhD,GACjCQ,EAAKuG,iBAAiB,QAAS,GAC/B,WAAU9D,YAAYzC,E,CAI9BgC,EAAgB,EAAM/C,MAAO,GAC7B,EAAQuD,aAAa,cAAe,QAEpC,EAAQ2D,MAAMC,KAAK,EAASC,iBAAiB,SACjD,CCpBIG,CAAmBN,GACnB3B,EAAiB,cACrB,CAsBO,SAASS,IACZ,GAAIL,KAAeX,IACf,MAAM3F,MAAM,0BAGZsG,KACAF,EAAc,UAGdT,KACAS,EAAc,YAGlBI,GAAkB,GAClBZ,GAAsB,GACtBW,GAAwB,EAC5B,CA7CAoB,SAAAA,EAAaO,iBAAiB,SAAS,IAAMN,MCJ7CA,G","sources":["webpack://battleship/./src/ts/model/Ship.ts","webpack://battleship/./src/ts/model/Board.ts","webpack://battleship/./src/AI.ts","webpack://battleship/./src/view/Ships.ts","webpack://battleship/./src/view/Uncover.ts","webpack://battleship/./src/view/Player.ts","webpack://battleship/./src/view/Display.ts","webpack://battleship/./src/view/Computer.ts","webpack://battleship/./src/Controller.ts","webpack://battleship/./src/index.ts"],"sourcesContent":["export class Ship {\n    static #MIN_LENGTH = 1\n    static #MAX_LENGTH = 5\n\n    static get minLength() {\n        return Ship.#MIN_LENGTH\n    }\n\n    static get maxLength() {\n        return Ship.#MAX_LENGTH\n    }\n\n    #length: number\n    #numberOfHits: number\n\n    constructor(length: number) {\n        if (length < Ship.#MIN_LENGTH || length > Ship.#MAX_LENGTH) {\n            throw new Error('Ship length out of bounds')\n        }\n        this.#length = length\n        this.#numberOfHits = 0\n    }\n\n    get length() {\n        return this.#length\n    }\n\n    get isSunk() {\n        return this.#length <= this.#numberOfHits\n    }\n\n    hit() {\n        if (!this.isSunk) {\n            this.#numberOfHits++\n        }\n    }\n}","import { Ship } from \"./Ship\"\n\nexport interface Cell { shipId: number, gotAttacked: boolean }\nexport interface Response { isShip: boolean, isSunk: boolean }\nexport type State = \"unknown\" | \"miss\" | \"hit\" | \"sunk\"\n\nexport type Orientation = 'horizontal' | 'vertical'\n\nexport class Board {\n    static #SIZE = 10\n\n    static get Size() {\n        return Board.#SIZE\n    }\n\n    #ships: Ship[]\n    #cells: Cell[][]\n\n    constructor() {\n        this.#ships = []\n        this.#cells = []\n\n        for (let i = 0; i < Board.#SIZE; i++) {\n            const row = []\n            for (let j = 0; j < Board.#SIZE; j++) {\n                row.push({ shipId: -1, gotAttacked: false })\n            }\n            this.#cells.push(row)\n        }\n    }\n\n    get ships() {\n        return this.#ships\n    }\n\n    get allAreSunk() {\n        if (this.#ships.length === 0) {\n            return false\n        }\n\n        return this.#ships.filter(ship => !ship.isSunk).length === 0\n    }\n\n    randomize(lengths: number[]) {\n        for (const length of lengths) {\n            const ship = new Ship(length)\n            let x: number\n            let y: number\n            let orientation: Orientation\n\n            do {\n                x = Math.round(Math.random() * 9)\n                y = Math.round(Math.random() * 9)\n                orientation = Math.random() > .5 ? 'horizontal' : 'vertical'\n            } while(!this.#isValidPlacement(ship, x, y, orientation))\n\n            this.place(ship, x, y, orientation)\n        }\n    }\n\n    isShip(x: number, y: number) {\n        return this.#cells[x][y].shipId >= 0\n    }\n\n    getState(x: number, y: number) {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (!cell.gotAttacked) {\n            return \"unknown\"\n        } else if (cell.shipId === -1) {\n            return \"miss\"\n        } else if (this.#ships[cell.shipId].isSunk) {\n            return \"sunk\"\n        } else {\n            return \"hit\"\n        }\n    }\n\n    place(ship: Ship, x: number, y: number, orientation: Orientation) {\n        this.#validateCoordinate(x, y)\n\n        if (!this.#isValidPlacement(ship, x, y, orientation)) {\n            throw new Error(`Invalid ship placement: ${x}, ${y}`)\n        }\n\n        this.#ships.push(ship)\n        const id = this.#ships.length - 1\n\n        for (let i = 0; i < ship.length; i++) {\n            if (orientation === 'horizontal') {\n                this.#cells[x + i][y].shipId = id\n            } else {\n                this.#cells[x][y + i].shipId = id\n            }\n        }\n    }\n\n    attack(x: number, y: number): Response {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (cell.gotAttacked) {\n            throw new Error(`Cell already received an attack: ${x}, ${y}`)\n        }\n\n        cell.gotAttacked = true\n\n        if (cell.shipId >= 0) {\n            const ship = this.#ships[cell.shipId]\n            ship.hit()\n            return { isShip: true, isSunk: ship.isSunk }\n        } else {\n            return { isShip: false, isSunk: false }\n        }\n    }\n\n    #isValidPlacement(\n        ship: Ship,\n        x: number,\n        y: number,\n        orientation: Orientation\n    ) {\n        const isHorizontal = orientation === 'horizontal'\n        if ((isHorizontal && x + ship.length > Board.#SIZE) ||\n            (!isHorizontal && y + ship.length > Board.#SIZE)\n        ) {\n            return false\n        }\n\n        for (let i = -1; i <= ship.length; i++) {\n            for (let j = -1; j <= +1; j++) {\n                let cell: Cell\n\n                try {\n                    if (isHorizontal) {\n                        cell = this.#cells[x + i][y + j]\n                    } else {\n                        cell = this.#cells[x + j][y + i]\n                    }\n                } catch {\n                    continue\n                }\n\n                if (cell?.shipId >= 0) {\n                    return false\n                }\n            }\n        }\n\n        return true\n    }\n\n    #validateCoordinate(x: number, y: number) {\n        if (x < 0 || y < 0 || x >= Board.#SIZE || y >= Board.#SIZE) {\n            throw new Error(`Invalid coordinate: ${x}, ${y}`)\n        }\n    }\n}","import { Board } from \"./ts/model/Board\"\nimport { Ship } from \"./ts/model/Ship\"\n\ntype Candidate = { x: number, y: number, evaluation: number }\n\nconst rim = Board.Size - 1\n\nexport function findBestTargets(board: Board): { x: number, y: number }[] {\n    const candidates: Candidate[] = []\n    let bestEvaluation = -Infinity\n\n    for (let x = 0; x < Board.Size; x++) {\n        for (let y = 0; y < Board.Size; y++) {\n            if (board.getState(x, y) === 'unknown') {\n                const evaluation = evaluate(board, x, y)\n\n                if (evaluation > bestEvaluation) {\n                    bestEvaluation = evaluation\n                }\n\n                candidates.push({ x, y, evaluation: evaluation })\n            }\n        }\n    }\n\n    return candidates\n        .filter(c => c.evaluation === bestEvaluation)\n        .map(({ x, y }) => ({ x, y }))\n}\n\nfunction evaluate(board: Board, x: number, y: number) {\n    const descendingLengthsInPlay = board.ships\n        .filter(s => !s.isSunk)\n        .map(s => s.length)\n        .sort()\n        .reverse()\n\n    const smallestLengthInPlay = descendingLengthsInPlay.slice(-1)[0]\n\n    if (!fits(board, x, y, smallestLengthInPlay) ||\n        diagonalNeighborIsHit(board, x, y)\n    ) {\n        return -Infinity\n    } else if (directNeighborIsHit(board, x, y)) {\n        return Infinity\n    } else {\n        let capacity = 0\n\n        for (const length of descendingLengthsInPlay) {\n            capacity += calculateCapacity(board, x, y, length)  * length\n        }\n\n        return capacity\n    }\n}\n\nfunction isHit(board: Board, coordinate: { x: number, y: number }) {\n    return board.getState(coordinate.x, coordinate.y) === \"hit\"\n}\n\nfunction fits(board: Board, x: number, y: number, length: number) {\n    return calculateCapacity(board, x, y, length) > 0\n}\n\n/**\n * Calculates how many ways there are to fit a ship\n * with the given length through the given coordinate.\n */\nfunction calculateCapacity(\n    board: Board,\n    x: number,\n    y: number,\n    length: number\n) {\n    if (length < Ship.minLength || length > Ship.maxLength) {\n        throw new Error('Length out of bounds')\n    }\n\n    const leftEnd = Math.max(0, x - length + 1)\n    const topEnd = Math.max(0, y - length + 1)\n    const rightEnd = Math.min(9, x + length - 1)\n    const bottomEnd = Math.min(9, y + length - 1)\n\n    let longest = 0\n    let current = 0\n\n    for (let i = leftEnd; i <= rightEnd; i++) {\n        const state = board.getState(i, y)\n        if (state === 'unknown' || state === 'hit') {\n            longest = ++current > longest ? current : longest\n        } else {\n            current = 0\n        }\n    }\n\n    const horizontalCapacity = Math.max(0, longest - length + 1)\n\n    longest = 0\n    current = 0\n\n    for (let j = topEnd; j <= bottomEnd; j++) {\n        const state = board.getState(x, j)\n        if (state === 'unknown' || state === 'hit') {\n            longest = ++current > longest ? current : longest\n        } else {\n            current = 0\n        }\n    }\n\n    const verticalCapacity = Math.max(0, longest - length + 1)\n\n    return Math.max(0, horizontalCapacity + verticalCapacity)\n}\n\nfunction diagonalNeighborIsHit(board: Board, x: number, y: number) {\n    return x > 0 && y > 0 && isHit(board, { x: x - 1, y: y - 1 })\n        || x > 0 && y < rim && isHit(board, { x: x - 1, y: y + 1 })\n        || y > 0 && x < rim && isHit(board, { x: x + 1, y: y - 1 })\n        || x < rim && y < rim && isHit(board, { x: x + 1, y: y + 1 })\n}\n\nfunction directNeighborIsHit(board: Board, x: number, y: number) {\n    return x > 0 && isHit(board, { x: x - 1, y: y })\n        || y > 0 && isHit(board, { x: x, y: y - 1 })\n        || x < rim && isHit(board, { x: x + 1, y: y })\n        || y < rim && isHit(board, { x: x, y: y + 1 })\n}","import { Ship } from \"../ts/model/Ship\";\n\nexport function initializeShips(ships: Ship[], divShips: HTMLDivElement) {\n    divShips.innerHTML = ''\n\n    for (let id = 0; id < ships.length; id++) {\n        const divShip = document.createElement('div')\n        divShip.classList.add('ship')\n        divShip.setAttribute('data-id', \"\"+id)\n        divShips.appendChild(divShip)\n\n        for (let i = 0; i < ships[id].length; i++) {\n            const square = document.createElement('div')\n            square.classList.add('square')\n            divShip.appendChild(square)\n        }\n    }\n}\n\nexport function updateShips(ships: Ship[], divShips: HTMLDivElement) {\n    for (let id = 0; id < ships.length; id++) {\n        if (ships[id].isSunk) {\n            const divShip = divShips.querySelector(`.ship[data-id=\"${id}\"`) as HTMLDivElement\n            divShip.classList.add('ship--sunk')\n        }\n    }\n}","import { Board } from \"../ts/model/Board\"\n\nexport function uncover(board: Board, cells: Element[], target: Element) {\n    if (target.classList.contains('cell--sunk')) {\n        return\n    }\n\n    if (target.classList.contains('cell--ship')) {\n        target.classList.add('cell--sunk')\n        const neighbors = cells.filter(cell => areNeighbors(target, cell))\n        neighbors.forEach(neighbor => uncover(board, cells, neighbor))\n    } else if (!target.classList.contains('water')) {\n        target.classList.add('water')\n        const coordinates = getCoordinates(target)\n        const response = board.attack(coordinates.x, coordinates.y)\n\n        if (response.isShip || response.isSunk) {\n            throw Error('Uncovered unexpected ship')\n        }\n    }\n}\n\nfunction areNeighbors(thisCell: Element, thatCell: Element) {\n    const thisX = thisCell.getAttribute('data-x') as string\n    const thisY = thisCell.getAttribute('data-y') as string\n    const thatX = thatCell.getAttribute('data-x') as string\n    const thatY = thatCell.getAttribute('data-y') as string\n\n    return Math.abs(+thisX - +thatX) <= 1\n        && Math.abs(+thisY - +thatY) <= 1\n}\n\nfunction getCoordinates(cell: Element) {\n    return {\n        x: +(cell.getAttribute('data-x') as string),\n        y: +(cell.getAttribute('data-y') as string)\n    }\n}","import { Board } from \"../ts/model/Board\"\nimport { findBestTargets } from \"../AI\"\nimport { initializeShips, updateShips } from \"./Ships\"\nimport { uncover } from \"./Uncover\"\n\nconst divSide = document.querySelector('#player-side') as HTMLDivElement\nconst divBoard = document.querySelector('#player-board') as HTMLDivElement\nconst divShips = document.querySelector('#player-ships') as HTMLDivElement\n\nlet board: Board\nlet cells: Element[]\n\nexport function initializePlayer(shipLengths: number[]) {\n    divBoard.innerHTML = ''\n    board = new Board()\n    board.randomize(shipLengths)\n\n    for (let y = 0; y < Board.Size; y++) {\n        for (let x = 0; x < Board.Size; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            if (board.isShip(x, y)) {\n                cell.classList.add('cell--ship')\n                cell.classList.add('cell--player')\n            }\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n    divSide.classList.add('transparent')\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function computerWon() {\n    return board.allAreSunk\n}\n\nexport function setPlayerTransparency(isTransparent: boolean) {\n    if (isTransparent) {\n        divSide.classList.add('transparent')\n    } else {\n        divSide.classList.remove('transparent')\n    }\n}\n\nexport function attackPlayer() {\n    const bestTargets = findBestTargets(board)\n    const { x, y } = pickAtRandom(bestTargets)\n    const isGameOver = attack(x, y)\n    updateShips(board.ships, divShips)\n\n    return isGameOver\n}\n\nfunction pickAtRandom(coordinates: { x: number, y: number }[]) {\n    const maxIndex = coordinates.length - 1\n    const randomIndex = Math.round(Math.random() * maxIndex)\n    const result = coordinates[randomIndex]\n\n    return { x: result.x, y: result.y }\n}\n\nfunction attack(x: number, y: number) {\n    const cell = getCell(x, y)\n    const response = board.attack(+x, +y)\n\n    if (response.isShip) {\n        cell.classList.add('cell--ship')\n        cell.classList.add('cell--player')\n\n        if (response.isSunk) {\n            uncover(board, cells, cell)\n        }\n    } else {\n        cell.classList.add('water')\n    }\n\n    cell.classList.add('cell--attacked')\n\n    return board.allAreSunk\n}\n\nfunction getCell(x: number, y: number) {\n    return cells.find(cell =>\n        cell.getAttribute('data-x') === ''+x &&\n        cell.getAttribute('data-y') === ''+y) as HTMLDivElement\n}","const display = document.getElementById('display')\nconst gameState = document.getElementById('game-state')\n\nexport function displayGameState(state: string) {\n    display?.classList.remove('display--won')\n    display?.classList.remove('display--lost')\n    gameState!.textContent = state\n}\n\nexport function displayWinner(winner: 'Player' | 'Computer') {\n    if (winner === \"Player\") {\n        gameState!.textContent = 'You won!'\n        display?.classList.add('display--won')\n    } else {\n        gameState!.textContent = 'You lost!'\n        display?.classList.add('display--lost')\n    }\n}","import { handleGameOver, makeComputerMove } from \"../Controller\"\nimport { Board } from \"../ts/model/Board\"\nimport { initializeShips, updateShips } from \"./Ships\"\nimport { uncover } from \"./Uncover\"\n\nconst divSide = document.querySelector('#computer-side') as HTMLDivElement\nconst divBoard = document.querySelector('#computer-board') as HTMLDivElement\nconst divShips = document.querySelector('#computer-ships') as HTMLDivElement\n\nlet board: Board\nlet cells: Element[]\n\nexport function initializeComputer(shipLengths: number[]) {\n    divBoard.innerHTML = ''\n    board = new Board()\n    board.randomize(shipLengths)\n\n    for (let y = 0; y < Board.Size; y++) {\n        for (let x = 0; x < Board.Size; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            cell.addEventListener('click', attack)\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n    divSide.setAttribute('data-active', 'true')\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function playerWon() {\n    return board.allAreSunk\n}\n\nexport function setComputerTransparency(isTransparent: boolean) {\n    if (isTransparent) {\n        divSide.classList.add('transparent')\n    } else {\n        divSide.classList.remove('transparent')\n    }\n}\n\nexport function setPlayerActivity(value: boolean) {\n    divSide.setAttribute('data-active', '' + value)\n}\n\nfunction attack(event: Event) {\n    const cell = event.target as Element\n\n    if (divSide.getAttribute('data-active') === \"false\" || cell.classList.contains('cell--attacked')) {\n        return\n    }\n\n    const x = cell.getAttribute('data-x') as string\n    const y = cell.getAttribute('data-y') as string\n\n    const response = board.attack(+x, +y)\n\n    if (response.isShip) {\n        cell.classList.add('cell--ship')\n\n        if (response.isSunk) {\n            uncover(board, cells, cell)\n        }\n    } else {\n        cell.classList.add('water')\n    }\n\n    cell.classList.add('cell--attacked')\n    updateShips(board.ships, divShips)\n\n    if (board.allAreSunk) {\n        handleGameOver()\n    } else {\n        makeComputerMove()\n    }\n}","import { computerWon, attackPlayer, initializePlayer, setPlayerTransparency } from './view/Player'\nimport { displayGameState, displayWinner } from './view/Display'\nimport { playerWon, initializeComputer, setComputerTransparency, setPlayerActivity } from './view/Computer'\n\nconst buttonStart = document.getElementById('start-over')\nlet gameIsOver = false\n\nbuttonStart?.addEventListener('click', () => initialize())\n\nexport function initialize() {\n    const shipLengths = [ 5, 4, 3, 3, 2, 2 ]\n    initializePlayer(shipLengths)\n    initializeComputer(shipLengths)\n    displayGameState('Player turn')\n}\n\nexport function makeComputerMove() {\n    setPlayerTransparency(false)\n    setComputerTransparency(true)\n    setPlayerActivity(false)\n    displayGameState('Computer turn')\n\n    setTimeout(() => {\n        gameIsOver = attackPlayer()\n\n        if (!gameIsOver) {\n            setPlayerTransparency(true)\n            setComputerTransparency(false)\n            setPlayerActivity(true)\n            displayGameState('Player turn')\n        } else {\n            handleGameOver()\n        }\n    }, Math.random() * 1500)\n}\n\nexport function handleGameOver() {\n    if (playerWon() && computerWon()) {\n        throw Error('Indecisive game result')\n    }\n\n    if (playerWon()) {\n        displayWinner('Player')\n    }\n\n    if (computerWon()) {\n        displayWinner('Computer')\n    }\n\n    setPlayerActivity(false)\n    setPlayerTransparency(false)\n    setComputerTransparency(false)\n}","import './styles.scss'\nimport { initialize } from './Controller'\n\ninitialize()"],"names":["Ship","minLength","maxLength","constructor","length","Error","this","isSunk","hit","Board","Size","i","row","j","push","shipId","gotAttacked","ships","allAreSunk","filter","ship","randomize","lengths","x","y","orientation","Math","round","random","place","isShip","getState","cell","id","attack","isHorizontal","rim","evaluate","board","descendingLengthsInPlay","s","map","sort","reverse","calculateCapacity","fits","slice","isHit","diagonalNeighborIsHit","directNeighborIsHit","Infinity","capacity","coordinate","leftEnd","max","topEnd","rightEnd","min","bottomEnd","longest","current","state","horizontalCapacity","verticalCapacity","initializeShips","divShips","innerHTML","divShip","document","createElement","classList","add","setAttribute","appendChild","square","updateShips","querySelector","uncover","cells","target","contains","thisCell","thatCell","thisX","getAttribute","thisY","thatX","thatY","abs","areNeighbors","forEach","neighbor","coordinates","response","divSide","divBoard","computerWon","setPlayerTransparency","isTransparent","remove","display","getElementById","gameState","displayGameState","textContent","displayWinner","winner","playerWon","setComputerTransparency","setPlayerActivity","value","event","handleGameOver","setTimeout","gameIsOver","bestTargets","candidates","bestEvaluation","evaluation","c","findBestTargets","maxIndex","result","pickAtRandom","isGameOver","find","getCell","attackPlayer","buttonStart","initialize","shipLengths","Array","from","querySelectorAll","initializePlayer","addEventListener","initializeComputer"],"sourceRoot":""}
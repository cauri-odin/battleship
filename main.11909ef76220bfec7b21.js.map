{"version":3,"file":"main.11909ef76220bfec7b21.js","mappings":"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","sources":["webpack://battleship/./src/ts/model/Ship.ts","webpack://battleship/./src/ts/model/Board.ts","webpack://battleship/./src/view/Ships.ts","webpack://battleship/./src/view/Uncover.ts","webpack://battleship/./src/view/Player.ts","webpack://battleship/./src/view/Display.ts","webpack://battleship/./src/view/Computer.ts","webpack://battleship/./src/Controller.ts","webpack://battleship/./src/index.ts"],"sourcesContent":["export class Ship {\n    static #MIN_LENGTH = 1\n    static #MAX_LENGTH = 5\n\n    #length: number\n    #numberOfHits: number\n\n    constructor(length: number) {\n        if (length < Ship.#MIN_LENGTH || length > Ship.#MAX_LENGTH) {\n            throw new Error('Ship length out of bounds')\n        }\n        this.#length = length\n        this.#numberOfHits = 0\n    }\n\n    get length() {\n        return this.#length\n    }\n\n    get isSunk() {\n        return this.#length <= this.#numberOfHits\n    }\n\n    hit() {\n        if (!this.isSunk) {\n            this.#numberOfHits++\n        }\n    }\n}","import { Ship } from \"./Ship\"\n\nexport interface Cell { shipId: number, gotAttacked: boolean }\nexport interface Response { isShip: boolean, isSunk: boolean }\n\nexport type Orientation = 'horizontal' | 'vertical'\n\nexport class Board {\n    static #SIZE = 10\n\n    #ships: Ship[]\n    #cells: Cell[][]\n\n    constructor() {\n        this.#ships = []\n        this.#cells = []\n\n        for (let i = 0; i < Board.#SIZE; i++) {\n            const row = []\n            for (let j = 0; j < Board.#SIZE; j++) {\n                row.push({ shipId: -1, gotAttacked: false })\n            }\n            this.#cells.push(row)\n        }\n    }\n\n    get ships() {\n        return this.#ships\n    }\n\n    get allAreSunk() {\n        if (this.#ships.length === 0) {\n            return false\n        }\n\n        return this.#ships.filter(ship => !ship.isSunk).length === 0\n    }\n\n    randomize(lengths: number[]) {\n        for (const length of lengths) {\n            const ship = new Ship(length)\n            let x: number\n            let y: number\n            let orientation: Orientation\n\n            do {\n                x = Math.round(Math.random() * 9)\n                y = Math.round(Math.random() * 9)\n                orientation = Math.random() > .5 ? 'horizontal' : 'vertical'\n            } while(!this.#isValidPlacement(ship, x, y, orientation))\n\n            this.place(ship, x, y, orientation)\n        }\n    }\n\n    isShip(x: number, y: number) {\n        return this.#cells[x][y].shipId >= 0\n    }\n\n    gotAttacked(x: number, y: number) {\n        return this.#cells[x][y].gotAttacked\n    }\n\n    place(ship: Ship, x: number, y: number, orientation: Orientation) {\n        this.#validateCoordinate(x, y)\n\n        if (!this.#isValidPlacement(ship, x, y, orientation)) {\n            throw new Error('Invalid ship placement')\n        }\n\n        this.#ships.push(ship)\n        const id = this.#ships.length - 1\n\n        for (let i = 0; i < ship.length; i++) {\n            if (orientation === 'horizontal') {\n                this.#cells[x + i][y].shipId = id\n            } else {\n                this.#cells[x][y + i].shipId = id\n            }\n        }\n    }\n\n    attack(x: number, y: number): Response {\n        this.#validateCoordinate(x, y)\n\n        const cell = this.#cells[x][y]\n\n        if (cell.gotAttacked) {\n            throw new Error(`Cell already received an attack: ${x}, ${y}`)\n        }\n\n        cell.gotAttacked = true\n\n        if (cell.shipId >= 0) {\n            const ship = this.#ships[cell.shipId]\n            ship.hit()\n            return { isShip: true, isSunk: ship.isSunk }\n        } else {\n            return { isShip: false, isSunk: false }\n        }\n    }\n\n    #isValidPlacement(\n        ship: Ship,\n        x: number,\n        y: number,\n        orientation: Orientation\n    ) {\n        const isHorizontal = orientation === 'horizontal'\n        if ((isHorizontal && x + ship.length > Board.#SIZE) ||\n            (!isHorizontal && y + ship.length > Board.#SIZE)\n        ) {\n            return false\n        }\n\n        for (let i = -1; i <= ship.length; i++) {\n            for (let j = -1; j <= +1; j++) {\n                let cell: Cell\n\n                try {\n                    if (isHorizontal) {\n                        cell = this.#cells[x + i][y + j]\n                    } else {\n                        cell = this.#cells[x + j][y + i]\n                    }\n                } catch {\n                    continue\n                }\n\n                if (cell?.shipId >= 0) {\n                    return false\n                }\n            }\n        }\n\n        return true\n    }\n\n    #validateCoordinate(x: number, y: number) {\n        if (x < 0 || y < 0 || x >= Board.#SIZE || y >= Board.#SIZE) {\n            throw new Error(`Invalid coordinate: ${x}, ${y}`)\n        }\n    }\n}","import { Ship } from \"../ts/model/Ship\";\n\nexport function initializeShips(ships: Ship[], divShips: HTMLDivElement) {\n    divShips.innerHTML = ''\n\n    for (let id = 0; id < ships.length; id++) {\n        const divShip = document.createElement('div')\n        divShip.classList.add('ship')\n        divShip.setAttribute('data-id', \"\"+id)\n        divShips.appendChild(divShip)\n\n        for (let i = 0; i < ships[id].length; i++) {\n            const square = document.createElement('div')\n            square.classList.add('square')\n            divShip.appendChild(square)\n        }\n    }\n}\n\nexport function updateShips(ships: Ship[], divShips: HTMLDivElement) {\n    for (let id = 0; id < ships.length; id++) {\n        if (ships[id].isSunk) {\n            const divShip = divShips.querySelector(`.ship[data-id=\"${id}\"`) as HTMLDivElement\n            divShip.classList.add('ship--sunk')\n        }\n    }\n}","import { Board } from \"../ts/model/Board\"\n\nexport function uncover(board: Board, cells: Element[], target: Element) {\n    if (target.classList.contains('cell--sunk')) {\n        return\n    }\n\n    if (target.classList.contains('cell--ship')) {\n        target.classList.add('cell--sunk')\n        const neighbors = cells.filter(cell => areNeighbors(target, cell))\n        neighbors.forEach(neighbor => uncover(board, cells, neighbor))\n    } else if (!target.classList.contains('water')) {\n        target.classList.add('water')\n        const coordinates = getCoordinates(target)\n        const response = board.attack(coordinates.x, coordinates.y)\n\n        if (response.isShip || response.isSunk) {\n            throw Error('Uncovered unexpected ship')\n        }\n    }\n}\n\nfunction areNeighbors(thisCell: Element, thatCell: Element) {\n    const thisX = thisCell.getAttribute('data-x') as string\n    const thisY = thisCell.getAttribute('data-y') as string\n    const thatX = thatCell.getAttribute('data-x') as string\n    const thatY = thatCell.getAttribute('data-y') as string\n\n    return Math.abs(+thisX - +thatX) <= 1\n        && Math.abs(+thisY - +thatY) <= 1\n}\n\nfunction getCoordinates(cell: Element) {\n    return {\n        x: +(cell.getAttribute('data-x') as string),\n        y: +(cell.getAttribute('data-y') as string)\n    }\n}","import { Board } from \"../ts/model/Board\"\nimport { initializeShips, updateShips } from \"./Ships\"\nimport { uncover } from \"./Uncover\"\n\nconst divSide = document.querySelector('#player-side') as HTMLDivElement\nconst divBoard = document.querySelector('#player-board') as HTMLDivElement\nconst divShips = document.querySelector('#player-ships') as HTMLDivElement\n\nlet board: Board\nlet cells: Element[]\n\nexport function initializePlayer(shipLengths: number[]) {\n    divBoard.innerHTML = ''\n    board = new Board()\n    board.randomize(shipLengths)\n\n    for (let y = 0; y < 10; y++) {\n        for (let x = 0; x < 10; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            if (board.isShip(x, y)) {\n                cell.classList.add('cell--ship')\n                cell.classList.add('cell--player')\n            }\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n    divSide.classList.add('opaque')\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function computerWon() {\n    return board.allAreSunk\n}\n\nexport function setPlayerOpacity(isOpaque: boolean) {\n    if (isOpaque) {\n        divSide.classList.add('opaque')\n    } else {\n        divSide.classList.remove('opaque')\n    }\n}\n\nexport function attackPlayer() {\n    let x: number\n    let y: number\n\n    do {\n        x = Math.round(Math.random() * 9)\n        y = Math.round(Math.random() * 9)\n    } while(board.gotAttacked(x, y))\n\n    const wasHit = attack(x, y)\n    updateShips(board.ships, divShips)\n\n    return wasHit\n}\n\nfunction attack(x: number, y: number) {\n    const cell = getCell(x, y)\n    const response = board.attack(+x, +y)\n\n    if (response.isShip) {\n        cell.classList.add('cell--ship')\n        cell.classList.add('cell--player')\n\n        if (response.isSunk) {\n            uncover(board, cells, cell)\n        }\n    } else {\n        cell.classList.add('water')\n    }\n\n    cell.classList.add('cell--attacked')\n\n    return board.allAreSunk\n}\n\nfunction getCell(x: number, y: number) {\n    return cells.find(cell =>\n        cell.getAttribute('data-x') === ''+x &&\n        cell.getAttribute('data-y') === ''+y) as HTMLDivElement\n}","const gameState = document.getElementById('game-state')\n\nexport function displayGameState(state: string) {\n    gameState!.textContent = state\n}","import { handleGameOver, makeComputerMove } from \"../Controller\"\nimport { Board } from \"../ts/model/Board\"\nimport { initializeShips, updateShips } from \"./Ships\"\nimport { uncover } from \"./Uncover\"\n\nconst divSide = document.querySelector('#computer-side') as HTMLDivElement\nconst divBoard = document.querySelector('#computer-board') as HTMLDivElement\nconst divShips = document.querySelector('#computer-ships') as HTMLDivElement\n\nlet board: Board\nlet cells: Element[]\n\nexport function initializeComputer(shipLengths: number[]) {\n    divBoard.innerHTML = ''\n    board = new Board()\n    board.randomize(shipLengths)\n\n    for (let y = 0; y < 10; y++) {\n        for (let x = 0; x < 10; x++) {\n            const cell = document.createElement('div')\n            cell.classList.add('cell')\n            cell.setAttribute('data-x', '' + x)\n            cell.setAttribute('data-y', '' + y)\n            cell.addEventListener('click', attack)\n            divBoard?.appendChild(cell)\n        }\n    }\n\n    initializeShips(board.ships, divShips)\n    divSide.setAttribute('data-active', 'true')\n\n    cells = Array.from(divBoard.querySelectorAll('.cell'))\n}\n\nexport function playerWon() {\n    return board.allAreSunk\n}\n\nexport function setComputerOpacity(isOpaque: boolean) {\n    if (isOpaque) {\n        divSide.classList.add('opaque')\n    } else {\n        divSide.classList.remove('opaque')\n    }\n}\n\nexport function setPlayerActivity(value: boolean) {\n    divSide.setAttribute('data-active', '' + value)\n}\n\nfunction attack(event: Event) {\n    const cell = event.target as Element\n\n    if (divSide.getAttribute('data-active') === \"false\" || cell.classList.contains('cell--attacked')) {\n        return\n    }\n\n    const x = cell.getAttribute('data-x') as string\n    const y = cell.getAttribute('data-y') as string\n\n    const response = board.attack(+x, +y)\n\n    if (response.isShip) {\n        cell.classList.add('cell--ship')\n\n        if (response.isSunk) {\n            uncover(board, cells, cell)\n        }\n    } else {\n        cell.classList.add('water')\n    }\n\n    cell.classList.add('cell--attacked')\n    updateShips(board.ships, divShips)\n\n    if (board.allAreSunk) {\n        handleGameOver()\n    } else {\n        makeComputerMove()\n    }\n}","import { computerWon, attackPlayer, initializePlayer, setPlayerOpacity } from './view/Player'\nimport { displayGameState } from './view/Display'\nimport { playerWon, initializeComputer, setComputerOpacity, setPlayerActivity } from './view/Computer'\n\nconst buttonStart = document.getElementById('start-over')\nlet gameIsOver = false\n\nbuttonStart?.addEventListener('click', () => initialize())\n\nexport function initialize() {\n    const shipLengths = [ 5, 4, 3, 3, 2, 2 ]\n    initializePlayer(shipLengths)\n    initializeComputer(shipLengths)\n    displayGameState('Player turn')\n}\n\nexport function makeComputerMove() {\n    setPlayerOpacity(false)\n    setComputerOpacity(true)\n    setPlayerActivity(false)\n    displayGameState('Computer turn')\n\n    setTimeout(() => {\n        gameIsOver = attackPlayer()\n\n        if (!gameIsOver) {\n            setPlayerOpacity(true)\n            setComputerOpacity(false)\n            setPlayerActivity(true)\n            displayGameState('Player turn')\n        } else {\n            handleGameOver()\n        }\n    }, Math.random() * 1500)\n}\n\nexport function handleGameOver() {\n    if (playerWon() && computerWon()) {\n        throw Error('Indecisive game result')\n    }\n\n    if (playerWon()) {\n        displayGameState('Player won!')\n        setPlayerActivity(false)\n    }\n\n    if (computerWon()) {\n        displayGameState('Computer won!')\n    }\n}","import './styles.scss'\nimport { initialize } from './Controller'\n\n\ninitialize()"],"names":["Ship","constructor","length","Error","this","isSunk","hit","Board","i","row","j","push","shipId","gotAttacked","ships","allAreSunk","filter","ship","randomize","lengths","x","y","orientation","Math","round","random","place","isShip","id","attack","cell","initializeShips","divShips","innerHTML","divShip","document","createElement","classList","add","setAttribute","appendChild","square","updateShips","querySelector","uncover","board","cells","target","contains","thisCell","thatCell","thisX","getAttribute","thisY","thatX","thatY","abs","areNeighbors","forEach","neighbor","coordinates","response","isHorizontal","divSide","divBoard","computerWon","setPlayerOpacity","isOpaque","remove","gameState","getElementById","displayGameState","state","textContent","playerWon","setComputerOpacity","setPlayerActivity","value","event","handleGameOver","setTimeout","gameIsOver","wasHit","find","getCell","attackPlayer","buttonStart","initialize","shipLengths","Array","from","querySelectorAll","initializePlayer","addEventListener","initializeComputer"],"sourceRoot":""}